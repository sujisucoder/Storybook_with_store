{
    "pipes": [],
    "interfaces": [
        {
            "name": "Task",
            "id": "interface-Task-791960f06f20b9e3de798bf2721a8c31423cae8ba03e769f3fab341a513f23629aac68fe3d759263ae2765d50cb5118a32c34222ea0695d08cd819f0255e81b9",
            "file": "src/app/models/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\r\n    id: string;\r\n    title: string;\r\n    state: string;\r\n  }",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "TaskStateModel",
            "id": "interface-TaskStateModel-ceaf2523d2fc7e95994fd3e9e37d17e9a69ddd26f2e348ebacf963b25dbc85cccaf0df9d2607905f9fd607106446c3fcd303e0bc645861083e01319f39fea61e",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\r\nimport { patch, updateItem } from '@ngxs/store/operators';\r\nimport { Task } from '../models/task.model';\r\n\r\n// Defines the actions available to the app\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class AppError {\r\n       static readonly type = actions.ERROR;\r\n       constructor(public payload: boolean) {}\r\n     }\r\n    \r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n// Sets the default state\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  // Defines a new selector for the error field\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  // Triggers the PinTask action, similar to redux\r\n  @Action(PinTask)\r\n  pinTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: PinTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Triggers the archiveTask action, similar to redux\r\n  @Action(ArchiveTask)\r\n  archiveTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n   @Action(AppError)\r\n setAppError(\r\n   { patchState, getState }: StateContext<TaskStateModel>,\r\n   { payload }: AppError\r\n ) {\r\n   const state = getState();\r\n   patchState({\r\n     error: !state.error,\r\n   });\r\n\r\n}\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"idle\" | \"loading\" | \"success\" | \"error\"",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "TasksState",
            "id": "injectable-TasksState-ceaf2523d2fc7e95994fd3e9e37d17e9a69ddd26f2e348ebacf963b25dbc85cccaf0df9d2607905f9fd607106446c3fcd303e0bc645861083e01319f39fea61e",
            "file": "src/app/state/task.state.ts",
            "properties": [],
            "methods": [
                {
                    "name": "archiveTask",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "ArchiveTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "ArchiveTask"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "ArchiveTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllTasks",
                    "args": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Task[]",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Selector",
                            "stringifiedArguments": ""
                        }
                    ],
                    "modifierKind": [
                        167,
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "TaskStateModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pinTask",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "PinTask",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "PinTask"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "PinTask",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAppError",
                    "args": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "type": "AppError",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "Action",
                            "stringifiedArguments": "AppError"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "type": "StateContext<TaskStateModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "type": "AppError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\r\nimport { patch, updateItem } from '@ngxs/store/operators';\r\nimport { Task } from '../models/task.model';\r\n\r\n// Defines the actions available to the app\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class AppError {\r\n       static readonly type = actions.ERROR;\r\n       constructor(public payload: boolean) {}\r\n     }\r\n    \r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n// Sets the default state\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  // Defines a new selector for the error field\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  // Triggers the PinTask action, similar to redux\r\n  @Action(PinTask)\r\n  pinTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: PinTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Triggers the archiveTask action, similar to redux\r\n  @Action(ArchiveTask)\r\n  archiveTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n   @Action(AppError)\r\n setAppError(\r\n   { patchState, getState }: StateContext<TaskStateModel>,\r\n   { payload }: AppError\r\n ) {\r\n   const state = getState();\r\n   patchState({\r\n     error: !state.error,\r\n   });\r\n\r\n}\r\n}\r\n",
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "AppError",
            "id": "class-AppError-ceaf2523d2fc7e95994fd3e9e37d17e9a69ddd26f2e348ebacf963b25dbc85cccaf0df9d2607905f9fd607106446c3fcd303e0bc645861083e01319f39fea61e",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\r\nimport { patch, updateItem } from '@ngxs/store/operators';\r\nimport { Task } from '../models/task.model';\r\n\r\n// Defines the actions available to the app\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class AppError {\r\n       static readonly type = actions.ERROR;\r\n       constructor(public payload: boolean) {}\r\n     }\r\n    \r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n// Sets the default state\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  // Defines a new selector for the error field\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  // Triggers the PinTask action, similar to redux\r\n  @Action(PinTask)\r\n  pinTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: PinTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Triggers the archiveTask action, similar to redux\r\n  @Action(ArchiveTask)\r\n  archiveTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n   @Action(AppError)\r\n setAppError(\r\n   { patchState, getState }: StateContext<TaskStateModel>,\r\n   { payload }: AppError\r\n ) {\r\n   const state = getState();\r\n   patchState({\r\n     error: !state.error,\r\n   });\r\n\r\n}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.ERROR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ArchiveTask",
            "id": "class-ArchiveTask-ceaf2523d2fc7e95994fd3e9e37d17e9a69ddd26f2e348ebacf963b25dbc85cccaf0df9d2607905f9fd607106446c3fcd303e0bc645861083e01319f39fea61e",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\r\nimport { patch, updateItem } from '@ngxs/store/operators';\r\nimport { Task } from '../models/task.model';\r\n\r\n// Defines the actions available to the app\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class AppError {\r\n       static readonly type = actions.ERROR;\r\n       constructor(public payload: boolean) {}\r\n     }\r\n    \r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n// Sets the default state\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  // Defines a new selector for the error field\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  // Triggers the PinTask action, similar to redux\r\n  @Action(PinTask)\r\n  pinTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: PinTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Triggers the archiveTask action, similar to redux\r\n  @Action(ArchiveTask)\r\n  archiveTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n   @Action(AppError)\r\n setAppError(\r\n   { patchState, getState }: StateContext<TaskStateModel>,\r\n   { payload }: AppError\r\n ) {\r\n   const state = getState();\r\n   patchState({\r\n     error: !state.error,\r\n   });\r\n\r\n}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.ARCHIVE_TASK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PinTask",
            "id": "class-PinTask-ceaf2523d2fc7e95994fd3e9e37d17e9a69ddd26f2e348ebacf963b25dbc85cccaf0df9d2607905f9fd607106446c3fcd303e0bc645861083e01319f39fea61e",
            "file": "src/app/state/task.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { State, Selector, Action, StateContext } from '@ngxs/store';\r\nimport { patch, updateItem } from '@ngxs/store/operators';\r\nimport { Task } from '../models/task.model';\r\n\r\n// Defines the actions available to the app\r\nexport const actions = {\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n\r\n};\r\n\r\nexport class ArchiveTask {\r\n  static readonly type = actions.ARCHIVE_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class PinTask {\r\n  static readonly type = actions.PIN_TASK;\r\n\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class AppError {\r\n       static readonly type = actions.ERROR;\r\n       constructor(public payload: boolean) {}\r\n     }\r\n    \r\n\r\n// The initial state of our store when the app loads.\r\n// Usually you would fetch this from a server\r\nconst defaultTasks = [\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n];\r\n\r\nexport interface TaskStateModel {\r\n  tasks: Task[];\r\n  status: 'idle' | 'loading' | 'success' | 'error';\r\n  error: boolean;\r\n}\r\n\r\n// Sets the default state\r\n@State<TaskStateModel>({\r\n  name: 'taskbox',\r\n  defaults: {\r\n    tasks: defaultTasks,\r\n    status: 'idle',\r\n    error: false,\r\n  },\r\n})\r\n@Injectable()\r\nexport class TasksState {\r\n  // Defines a new selector for the error field\r\n  @Selector()\r\n  static getError(state: TaskStateModel): boolean {\r\n    return state.error;\r\n  }\r\n\r\n  @Selector()\r\n  static getAllTasks(state: TaskStateModel): Task[] {\r\n    return state.tasks;\r\n  }\r\n\r\n  // Triggers the PinTask action, similar to redux\r\n  @Action(PinTask)\r\n  pinTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: PinTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_PINNED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (pinnedTask) => pinnedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n  // Triggers the archiveTask action, similar to redux\r\n  @Action(ArchiveTask)\r\n  archiveTask(\r\n    { getState, setState }: StateContext<TaskStateModel>,\r\n    { payload }: ArchiveTask\r\n  ) {\r\n    const task = getState().tasks.find((task) => task.id === payload);\r\n    if (task) {\r\n      const updatedTask: Task = {\r\n        ...task,\r\n        state: 'TASK_ARCHIVED',\r\n      };\r\n      setState(\r\n        patch({\r\n          tasks: updateItem<Task>(\r\n            (archivedTask) => archivedTask?.id === payload,\r\n            updatedTask\r\n          ),\r\n        })\r\n      );\r\n    }\r\n  }\r\n\r\n   @Action(AppError)\r\n setAppError(\r\n   { patchState, getState }: StateContext<TaskStateModel>,\r\n   { payload }: AppError\r\n ) {\r\n   const state = getState();\r\n   patchState({\r\n     error: !state.error,\r\n   });\r\n\r\n}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "actions.PIN_TASK",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        124,
                        146
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-6e21347ff1c71c48b1b87a3401aa08f143c420eff314ab8a85262ad57ada57a81d278f79b945059b281b9517ade815b59b857d61d9069d8b0b51d7cc927abdab",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'store'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'store';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "  <app-inbox-screen></app-inbox-screen>\r\n"
        },
        {
            "name": "HideComponent",
            "id": "component-HideComponent-2b1e4f56253625c7f8346ff5b54512a46e4af3a6d88237bfc64b1d5bffd1eacc60ead02dc24699e4e72436c1bcc2bb07f1cae4b17069a441a853057ee7b749d8",
            "file": "src/app/hide/hide.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-hide-story",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./hide.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "myselectedtemp",
                    "defaultValue": "'fromComponent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "myContext",
                    "defaultValue": "{ $implicit: 'World', localSk: 'Svet' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "simpleTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'simpleTask', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "simpleTaskMarkdown1",
                    "defaultValue": "`\t\n  \t\n- The Taskbox app is gonna consists of a   checkbox/Square box that can be activated or deactivated when ticked \t\n- you can add the task title .\t\n- by using the pin icon on the right side of the corner you can set a task to be pinned on the top.\t\n \t\n  ### The taskbox app will have 3 states which we are going to make through 3 different stories.\t\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "simpleTaskMarkdown2",
                    "defaultValue": "`\t\n  what these three stories create is a scenerio \t\n  - Default : In this story the app is gonna be default means it  will not be having any pinned or archived tasks.\t\n  - Pinned : In this story the  task is gonna be in pinned state means the selected task is pinned to the top of the list, but for now there is only one task.\t\n  - Archived : In this story the task is considered as finished.\t\n  ### Let's use Typescript to create an interface for the Task model \t\n  src/app/models/task.model.ts\t\n  \\`\\`\\`typescript\t\nexport interface Task {\t\n  id: string;\t\n  title: string;\t\n  state: string;\t\n}\t\n  \\`\\`\\`\t\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "simpleTaskMermaid",
                    "defaultValue": "`\t\n  <pre class=\"mermaid\">\t\n  flowchart TD\t\n  id1([Create a task.component.ts ])-->id2([Create a task.stories.ts])\t\n  id2-->id3([Make 3 Stories ])\t\n  id3-->id4[[1.Default]]\t\n  id3-->id5[[2.Pinned]]\t\n  id3-->id6[[3.Archived]]\t\n  </pre>\t\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "taskList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'taskList', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "taskListMarkdown1",
                    "defaultValue": "`\t\n    #####  As you can see  now we added two more states using storybook.\t\n    - Loading: In this story, we created a state where the task list is going to be loading to show \t\n    - Empty: In this story, we don't have any tasks left to finish. \t\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "taskListMermaid",
                    "defaultValue": "`\t\n  \t\n  <pre class=\"mermaid\">\t\n    flowchart TD\t\n    id1([Create a tasklist.Component.ts file ])--> id2([Create a  tasklist.Stories.ts file])\t\n    id2-->id3([Create 4 Stories])\t\n    id3-->id4[[1.Default]]\t\n    id3-->id5[[2.Pinned ]]\t\n    id3-->id6[[3.Empty]]\t\n    id3-->id7[[4.Loading]]\t\n    id3-->id8([create an Empty array named task])\t\n    id8-->id9([Create a boolean varriable loading and set it false. ])\t\n    id9-->id10([change the  task array values to see different stories ])\t\n   \t\n    \t\n    \t\n  </pre>\t\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "tems",
                    "defaultValue": "this.simpleTask",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  AfterContentInit,\n  ViewChild,\n  TemplateRef,\n} from '@angular/core';\n\n\n@Component({\n  selector: 'app-hide-story',\n  templateUrl: './hide.component.html',\n})\nexport class HideComponent implements AfterContentInit {\n\n  @ViewChild('simpleTask', { static: true })\n  simpleTask!: TemplateRef<any>;\n  @ViewChild('taskList', { static: true })\n  taskList!: TemplateRef<any>;\n\n  tems: TemplateRef<any> = this.simpleTask;\n\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n  @Input()\n  myselectedtemp: string = 'fromComponent';\n\n  simpleTaskMermaid = `\t\n  <pre class=\"mermaid\">\t\n  flowchart TD\t\n  id1([Create a task.component.ts ])-->id2([Create a task.stories.ts])\t\n  id2-->id3([Make 3 Stories ])\t\n  id3-->id4[[1.Default]]\t\n  id3-->id5[[2.Pinned]]\t\n  id3-->id6[[3.Archived]]\t\n  </pre>\t\n  `;\n  simpleTaskMarkdown1 = `\t\n  \t\n- The Taskbox app is gonna consists of a   checkbox/Square box that can be activated or deactivated when ticked \t\n- you can add the task title .\t\n- by using the pin icon on the right side of the corner you can set a task to be pinned on the top.\t\n \t\n  ### The taskbox app will have 3 states which we are going to make through 3 different stories.\t\n  `;\n  simpleTaskMarkdown2 = `\t\n  what these three stories create is a scenerio \t\n  - Default : In this story the app is gonna be default means it  will not be having any pinned or archived tasks.\t\n  - Pinned : In this story the  task is gonna be in pinned state means the selected task is pinned to the top of the list, but for now there is only one task.\t\n  - Archived : In this story the task is considered as finished.\t\n  ### Let's use Typescript to create an interface for the Task model \t\n  src/app/models/task.model.ts\t\n  \\`\\`\\`typescript\t\nexport interface Task {\t\n  id: string;\t\n  title: string;\t\n  state: string;\t\n}\t\n  \\`\\`\\`\t\n  `;\n\n  taskListMermaid = `\t\n  \t\n  <pre class=\"mermaid\">\t\n    flowchart TD\t\n    id1([Create a tasklist.Component.ts file ])--> id2([Create a  tasklist.Stories.ts file])\t\n    id2-->id3([Create 4 Stories])\t\n    id3-->id4[[1.Default]]\t\n    id3-->id5[[2.Pinned ]]\t\n    id3-->id6[[3.Empty]]\t\n    id3-->id7[[4.Loading]]\t\n    id3-->id8([create an Empty array named task])\t\n    id8-->id9([Create a boolean varriable loading and set it false. ])\t\n    id9-->id10([change the  task array values to see different stories ])\t\n   \t\n    \t\n    \t\n  </pre>\t\n  `;\n  taskListMarkdown1 = `\t\n    #####  As you can see  now we added two more states using storybook.\t\n    - Loading: In this story, we created a state where the task list is going to be loading to show \t\n    - Empty: In this story, we don't have any tasks left to finish. \t\n  `;\n  ngAfterContentInit() {\n    switch (this.myselectedtemp) {\n      case 'simpleTask':\n        this.tems = this.simpleTask;\n        break;\n      case 'taskList':\n        this.tems = this.taskList;\n        break;\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ],
            "templateData": "\n\n<ng-template #simpleTask>\n    <markdown ngPreserveWhitespaces> --- </markdown>\n    <markdown ngPreserveWhitespaces> {{simpleTaskMarkdown1}} </markdown>\n    <markdown mermaid ngPreserveWhitespaces>\n      {{ simpleTaskMermaid}}\n    </markdown>\n    <markdown ngPreserveWhitespaces> {{simpleTaskMarkdown2}} </markdown>\n    <div markdown ngPreserveWhitespaces>---</div>\n  </ng-template>\n  \n  <ng-template #taskList>\n    <markdown ngPreserveWhitespaces> --- </markdown>\n    <markdown mermaid ngPreserveWhitespaces>\n      {{ taskListMermaid}}\n    </markdown>\n    <markdown ngPreserveWhitespaces> --- </markdown>\n    <div markdown ngPreserveWhitespaces>{{taskListMarkdown1}}</div>\n  </ng-template>\n  \n\n<ng-container [ngTemplateOutlet]=\"tems\" [ngTemplateOutletContext]=\"myContext\">\n</ng-container>"
        },
        {
            "name": "InboxScreenComponent",
            "id": "component-InboxScreenComponent-acfba4111a2d5e66529f6c06ad5c79014614ae898fc2a4db06738722cbae90e6d547cb78db1212f7c9616def38e852e64e4b100727bb13b81bd278f38a5de552",
            "file": "src/app/components/inbox-screen/inbox-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-inbox-screen",
            "styleUrls": [],
            "styles": [],
            "template": "<app-pure-inbox-screen [error]=\"error$ | async\"></app-pure-inbox-screen>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-inbox-screen',\r\n  template: `\r\n    <app-pure-inbox-screen [error]=\"error$ | async\"></app-pure-inbox-screen>\r\n  `,\r\n})\r\nexport  class InboxScreenComponent {\r\n  error$: Observable<boolean>;\r\n  constructor(private store: Store) {\r\n    this.error$ = store.select((state) => state.taskbox.error);\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "MarkdownComponent",
            "id": "component-MarkdownComponent-2d4e397bcbf1632c0b5a34b165d98770ed5308968a41012f15b53f085e7371af70e87b562b5bad3233280b3d87a58c1a66470abf9521a7a1429e5727a86a6ce8",
            "file": "src/app/markdown/markdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-markdowncode",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./markdown.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "myselectedtemp",
                    "defaultValue": "'fromComponent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 118,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fromComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fromComponent', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "fromsrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fromSrc', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "fromTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fromTemplate', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "markdownfromcomponent",
                    "defaultValue": "` \n  ## keep a variable in component to load the value \n\n\n  \\`\\`\\`typescript\n  markdownfromcomponent = XXX\n  \\`\\`\\`\n\n  ### From the HTML the usage is:\n   \\`\\`\\`typescript\n   <div markdown ngPreserveWhitespaces>{{ markdownfromcomponent }}</div>\n   \\`\\`\\`\n\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "markdownfromsrc",
                    "defaultValue": "`\n  # Working for app.component.html but not working in strories\n  ## Need to raise PR for storybook\n  \n  \\`\\`\\`typescript\n      <div class=\"markdown\">\n      <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n      </div>\n  \\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "markdownfromtemplate",
                    "defaultValue": "`  \n  ### Usage is done by:\n  \\`\\`\\`typescript\n  <markdown ngPreserveWhitespaces> --- </markdown>  \n  <markdown ngPreserveWhitespaces >\n    ### Lists\n      1. Ordered list\n      2. Another bullet point\n        - Unordered list\n        - Another unordered bullet\n    {{ '#working' | language: 'typescript' }}\n    </markdown>\n    <markdown ngPreserveWhitespaces> --- </markdown>  \n  \\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "markdownnclipboard",
                    "defaultValue": "`\n  # Clipboard copy feature Working for app.component.html but not working in strories\n  ## Need to raise PR for storybook\n\n  \\`\\`\\`typescript\n  <markdown ngPreserveWhitespaces clipboard>\n  {{someothervar}}\n  {{ somevar | language: 'typescript' }}\n  </markdown>\n  \\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "markdownnofilter",
                    "defaultValue": "`\n  # Working fine\n  ## Need to give the prompt and filtered output\n  \\`\\`\\`typescript\n  <markdown\n  ngPreserveWhitespaces\n  commandLine\n  [prompt]=\"'PS C:\\Users\\Chris>'\"\n  [filterOutput]=\"'(out)'\">\n  \\`\\`\\`typescript\n  Get-Date\n  (out)\n  (out)Sunday, November 7, 2021 8:19:21 PM\n  (out)\n  \\`\\`\\`\n  </markdown>\n  \\`\\`\\` \n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "myContext",
                    "defaultValue": "{ $implicit: 'World', localSk: 'Svet' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "showclipboard",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'showclipboard', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "showcommandline",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'showcommandline', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "someothervar",
                    "defaultValue": "`\n  ## Markdown from component no code __works__!\n  ---\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "somevar",
                    "defaultValue": "`\n  ## Markdown from component with typescript __works__!\n  ---\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "tems",
                    "defaultValue": "this.fromTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 113
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  AfterContentInit,\n  ViewChild,\n  TemplateRef,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-markdowncode',\n  templateUrl: './markdown.component.html',\n  \n})\nexport class MarkdownComponent implements  AfterContentInit {\n  markdownfromtemplate = `  \n  ### Usage is done by:\n  \\`\\`\\`typescript\n  <markdown ngPreserveWhitespaces> --- </markdown>  \n  <markdown ngPreserveWhitespaces >\n    ### Lists\n      1. Ordered list\n      2. Another bullet point\n        - Unordered list\n        - Another unordered bullet\n    {{ '#working' | language: 'typescript' }}\n    </markdown>\n    <markdown ngPreserveWhitespaces> --- </markdown>  \n  \\`\\`\\`\n  `;\n\n  markdownfromcomponent = ` \n  ## keep a variable in component to load the value \n\n\n  \\`\\`\\`typescript\n  markdownfromcomponent = XXX\n  \\`\\`\\`\n\n  ### From the HTML the usage is:\n   \\`\\`\\`typescript\n   <div markdown ngPreserveWhitespaces>{{ markdownfromcomponent }}</div>\n   \\`\\`\\`\n\n  `;\n\n  markdownfromsrc = `\n  # Working for app.component.html but not working in strories\n  ## Need to raise PR for storybook\n  \n  \\`\\`\\`typescript\n      <div class=\"markdown\">\n      <markdown mermaid [src]=\"'../../assets/Testing.md'\"></markdown>\n      </div>\n  \\`\\`\\`\n  `;\n\n  markdownnofilter = `\n  # Working fine\n  ## Need to give the prompt and filtered output\n  \\`\\`\\`typescript\n  <markdown\n  ngPreserveWhitespaces\n  commandLine\n  [prompt]=\"'PS C:\\Users\\Chris>'\"\n  [filterOutput]=\"'(out)'\">\n  \\`\\`\\`typescript\n  Get-Date\n  (out)\n  (out)Sunday, November 7, 2021 8:19:21 PM\n  (out)\n  \\`\\`\\`\n  </markdown>\n  \\`\\`\\` \n  `;\n\n  markdownnclipboard = `\n  # Clipboard copy feature Working for app.component.html but not working in strories\n  ## Need to raise PR for storybook\n\n  \\`\\`\\`typescript\n  <markdown ngPreserveWhitespaces clipboard>\n  {{someothervar}}\n  {{ somevar | language: 'typescript' }}\n  </markdown>\n  \\`\\`\\`\n  `;\n\n\n  someothervar = `\n  ## Markdown from component no code __works__!\n  ---\n  `;\n  somevar = `\n  ## Markdown from component with typescript __works__!\n  ---\n  `;\n\n  @ViewChild('fromTemplate', { static: true })\n  fromTemplate!: TemplateRef<any>;\n\n  @ViewChild('fromComponent', { static: true })\n  fromComponent!: TemplateRef<any>;\n\n  @ViewChild('fromSrc', { static: true })\n  fromsrc!: TemplateRef<any>;\n\n  @ViewChild('showcommandline', { static: true })\n  showcommandline!: TemplateRef<any>;\n\n  @ViewChild('showclipboard', { static: true })\n  showclipboard!: TemplateRef<any>;\n  \n  tems: TemplateRef<any> = this.fromTemplate;\n\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n  @Input()\n  myselectedtemp: string = 'fromComponent';\n\n\n  ngAfterContentInit() {\n    switch (this.myselectedtemp) {\n      case 'fromTemplate':\n        this.tems = this.fromTemplate;\n        break;\n\n      case 'fromComponent':\n        this.tems = this.fromComponent;\n        break;\n\n      case 'fromSrc':\n        this.tems = this.fromsrc;\n        break;\n\n      case 'showcommandline':\n        this.tems = this.showcommandline;\n        break;\n\n        case 'showclipboard':\n          this.tems = this.showclipboard;\n          break;\n\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ],
            "templateData": "<ng-template #fromTemplate>\n    <markdown mermaid ngPreserveWhitespaces>\n      <pre class=\"mermaid\">\n              flowchart TD\n              id1([Markdown]) --> id2([Markdown in html])\n              id1([Markdown]) -->  id3([Markdown in template])\n              id1([Markdown]) --> id4([Markdown in data])\n              id1([Markdown]) --> id5([Markdown loaded from src])\n              id1([Markdown]) --> id6([Markdown with commandline])\n            </pre>\n    </markdown>\n    <markdown ngPreserveWhitespaces> --- </markdown>\n    <markdown ngPreserveWhitespaces>\n      ### Lists\n      1. Ordered list\n      2. Another bullet point\n      - Unordered list\n      - Another unordered bullet\n      {{ '#working' | language: 'typescript' }}\n    </markdown>\n    <markdown ngPreserveWhitespaces> --- </markdown>\n    <div markdown ngPreserveWhitespaces>{{ markdownfromtemplate }}</div>\n  </ng-template>\n  \n  \n  <ng-template #fromComponent>\n    <markdown ngPreserveWhitespaces> --- </markdown>\n    <div markdown ngPreserveWhitespaces>{{ markdownfromcomponent }}</div>\n  </ng-template>\n  \n  <ng-template #fromSrc>\n    <div class=\"markdown\">\n      <markdown [src]=\"'../Testing.md'\"></markdown>\n    </div>\n    <markdown ngPreserveWhitespaces> --- </markdown>\n    <div markdown ngPreserveWhitespaces>{{ markdownfromsrc }}</div>\n  </ng-template>\n  \n  <ng-template #showcommandline>\n    <div markdown ngPreserveWhitespaces>{{ markdownnofilter }}</div>\n    <markdown ngPreserveWhitespaces> --- </markdown>\n    <markdown\n    ngPreserveWhitespaces\n    commandLine\n    [prompt]=\"'PS C:\\Users\\Chris>'\"\n    [filterOutput]=\"'(out)'\">\n    ```powershell\n    Get-Date\n    (out)\n    (out)Sunday, November 7, 2021 8:19:21 PM\n    (out)\n    `​``\n  </markdown>\n  \n  </ng-template>\n  \n  <ng-template #showclipboard>\n    <div markdown ngPreserveWhitespaces>{{ markdownnclipboard }}</div>\n    <markdown ngPreserveWhitespaces clipboard>\n      {{someothervar}}\n      {{ somevar | language: 'typescript' }}\n      </markdown> \n  \n  </ng-template>\n  \n  <ng-container [ngTemplateOutlet]=\"tems\" [ngTemplateOutletContext]=\"myContext\">\n  </ng-container>\n"
        },
        {
            "name": "MermaidComponent",
            "id": "component-MermaidComponent-eddbdea71588454e2ed65f28c10b850081f902bc3e558de4232d1cd537f84fa85d41e6c91c28b3ff3a2b18e25afeae65084d8618c287523ce1ee29ae84604040",
            "file": "src/app/mermaid/mermaid.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mermaidcode",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./mermaid.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "myselectedtemp",
                    "defaultValue": "'fromComponent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "attachclass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'attachclass', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "customcolors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'customcolors', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "fa",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fa', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "fromComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fromComponent', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "fromSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fromSrc', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "fromTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fromTemplate', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "mermaidattachclass",
                    "defaultValue": "`\n  <pre class=\"mermaid\">\n  flowchart LR\n    A:::someclass --> B\n    classDef someclass fill:#f96;\n    </pre>\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 171
                },
                {
                    "name": "mermaidattachclassExplained",
                    "defaultValue": "`\n  \n  ## Easiliy we can explain relationship between classes\n  \\`\\`\\`typescript\n  <pre class=\"mermaid\">\n  flowchart LR\n    A:::someclass --> B\n    classDef someclass fill:#f96;\n    </pre>\n\\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 179
                },
                {
                    "name": "mermaidcustomcolors",
                    "defaultValue": "`\n  <pre class=\"mermaid\">\n\n  graph TD\n  %% Nodes\n      0[Key Variable]\n      1[Top Variable 1]\n      2[Top Variable 2]\n      3[Top Variable 3]\n      31[Sub Variable 1]\n      32[Sub Variable 2]\n      321[Element 1]\n      322[Element 2]\n\n  %% Links\n      0 --- 1\n      0 --- 2\n      0 --- 3\n      3 --- 31\n      3 --- 32\n      32 --- 321\n      32 --- 322\n\n          %% Defining the styles\n      classDef Red fill:#FF9999;\n      classDef Amber fill:#FFDEAD;\n      classDef Green fill:#BDFFA4;\n\n  %% Assigning styles to nodes\n      class 3,32,321 Red;\n      class 322 Amber;\n      class 1,2,31 Green;\n\n</pre>\n\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 223
                },
                {
                    "name": "mermaidcustomcolorsExplained",
                    "defaultValue": "`\n  \n  ## Easiliy we can explain with custom colors\n  \\`\\`\\`typescript\n  <pre class=\"mermaid\">\n\n  graph TD\n  %% Nodes\n      0[Key Variable]\n      1[Top Variable 1]\n      2[Top Variable 2]\n      3[Top Variable 3]\n      31[Sub Variable 1]\n      32[Sub Variable 2]\n      321[Element 1]\n      322[Element 2]\n\n  %% Links\n      0 --- 1\n      0 --- 2\n      0 --- 3\n      3 --- 31\n      3 --- 32\n      32 --- 321\n      32 --- 322\n\n          %% Defining the styles\n      classDef Red fill:#FF9999;\n      classDef Amber fill:#FFDEAD;\n      classDef Green fill:#BDFFA4;\n\n  %% Assigning styles to nodes\n      class 3,32,321 Red;\n      class 322 Amber;\n      class 1,2,31 Green;\n\n</pre>\n\n\\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 260
                },
                {
                    "name": "mermaidfa",
                    "defaultValue": "`\n  <pre class=\"mermaid\">\n  flowchart TD\n    B[\"fab:fa-twitter for peace\"]\n    B-->C[fa:fa-ban forbidden]\n    B-->D(fa:fa-spinner);\n    B-->E(A fa:fa-camera-retro perhaps?)\n</pre>\n\n\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 301
                },
                {
                    "name": "mermaidfaExplained",
                    "defaultValue": "`\n  \n  ## Font Awesome is not working - Mermaid is now only compatible with Font Awesome versions 4 and 5\n  \\`\\`\\`typescript\n  <pre class=\"mermaid\">\n    flowchart TD\n      B[\"fab:fa-twitter for peace\"]\n      B-->C[fa:fa-ban forbidden]\n      B-->D(fa:fa-spinner);\n      B-->E(A fa:fa-camera-retro perhaps?)\n  </pre>\n\n\n\\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 313
                },
                {
                    "name": "mermaidfromcomponent",
                    "defaultValue": "`\n  <pre class=\"mermaid\">\n    flowchart TD\n    id1([Mermaid]) --> id2([Markdown in html])\n    id1([Mermaid]) -->  id3([Markdown in template])\n    id1([Mermaid]) --> id4([Markdown in data])\n    id1([Mermaid]) --> id5([Markdown loaded from src])\n  </pre>\n  </markdown>\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "mermaidfromcomponentExplain",
                    "defaultValue": "`\n  ## keep a variable in component to load the value \n\n  \\`\\`\\`typescript\n  mermaidfromcomponent = \\`\n  <pre class=\"mermaid\">\n    flowchart TD\n    id1([Mermaid]) --> id2([Markdown in html])\n    id1([Mermaid]) -->  id3([Markdown in template])\n    id1([Mermaid]) --> id4([Markdown in data])\n    id1([Mermaid]) --> id5([Markdown loaded from src])\n  </pre>\n  </markdown>\n  \\`\n  \\`\\`\\`\n\n  ## And call the variable from Template\n\n  \\`\\`\\`typescript\n  <markdown mermaid  ngPreserveWhitespaces>\n  {{ mermaidfromcomponent}}\n  </markdown>\n  \\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "mermaidfromSrcExplain",
                    "defaultValue": "`\n  # Working for app.component.html but not working in strories\n  ## Need to raise PR for storybook\n  \n  \\`\\`\\`typescript\n  <div class=\"markdown\" >\n  <markdown mermaid [src]=\"'./Testing.md'\"></markdown>\n  </div>\n  \\`\\`\\`\n\n  ## Testing.md file contains\n  \\`\\`\\`typescript\n  <pre class=\"mermaid\">\n  journey\n    title My Career Graph\n    section Before Tech\n    Secondary- 88%: 1: Manoj\n    Higher Secondary-89%: 2: Manoj\n    College-UG- 67%: 3: Manoj\n    College-PG- 74%: 4: Manoj\n    section After Tech\n    Lecturer- 1Y: 5: Manoj\n    Telecom Testing- 14Y: 6: Manoj\n    Development- 7Y: 7: Manoj\n  \n  </pre>\n  \\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "mermaidfromtemplate",
                    "defaultValue": "`\n  ## keep a variable in component to load the value \n\n  \\`\\`\\`typescript\n  <markdown mermaid  ngPreserveWhitespaces>\n  <pre class=\"mermaid\">\n    flowchart TD\n    id1([Mermaid]) --> id2([Markdown in html])\n    id1([Mermaid]) -->  id3([Markdown in template])\n    id1([Mermaid]) --> id4([Markdown in data])\n    id1([Mermaid]) --> id5([Markdown loaded from src])\n  </pre>\n  </markdown>\n  \\`\\`\\`\n\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "mermaidsimpleform",
                    "defaultValue": "`\n  <pre class=\"mermaid\">\n    graph LR\n    %% Nodes\n    1([Start])\n    2[Look for lost item]\n    3{Did I find it?}\n    4([Stop])\n    %% Node links\n    1 --> 2 --> 3 -->|Yes| 4\n    3 -.->|No| 2\n  </pre>\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 191
                },
                {
                    "name": "mermaidsimpleformExplained",
                    "defaultValue": "`\n  \n  ## Easiliy we can explain Simple Forms\n  \\`\\`\\`typescript\n  <pre class=\"mermaid\">\n    graph LR\n    %% Nodes\n    1([Start])\n    2[Look for lost item]\n    3{Did I find it?}\n    4([Stop])\n    %% Node links\n    1 --> 2 --> 3 -->|Yes| 4\n    3 -.->|No| 2\n  </pre>\n\\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 205
                },
                {
                    "name": "mermaidsubgraph",
                    "defaultValue": "`\n  <pre class=\"mermaid\">\n  flowchart TB\n  c1-->a2\n  subgraph one\n  a1-->a2\n  end\n  subgraph two\n  b1-->b2\n  end\n  subgraph three\n  c1-->c2\n  end\n</pre>\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 136
                },
                {
                    "name": "mermaidsubgraphExplained",
                    "defaultValue": "`\n  ## Easiliy we can explain ideas in subgraphs\n  \\`\\`\\`typescript\n  <pre class=\"mermaid\">\n  flowchart TB\n  c1-->a2\n  subgraph one\n  a1-->a2\n  end\n  subgraph two\n  b1-->b2\n  end\n  subgraph three\n  c1-->c2\n  end\n</pre>\n\\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 152
                },
                {
                    "name": "mermaidthemes",
                    "defaultValue": "`\n\n  <pre class=\"mermaid\">\n    %%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#ff0000'}}}%%\n            graph TD\n              A[Christmas] -->|Get money| B(Go shopping)\n              B --> C{Let me think}\n              B --> G[/Another/]\n              C ==>|One| D[Laptop]\n              C -->|Two| E[iPhone]\n              C -->|Three| F[fa:fa-car Car]\n              subgraph section\n                C\n                D\n                E\n                F\n                G\n              end\n  </pre>\n\n\n\n\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 329
                },
                {
                    "name": "mermaidthemesExplained",
                    "defaultValue": "`\n  \n  ## Themes is working\n  \\`\\`\\`typescript\n  <pre class=\"mermaid\">\n  <pre class=\"mermaid\">\n    %%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#ff0000'}}}%%\n            graph TD\n              A[Christmas] -->|Get money| B(Go shopping)\n              B --> C{Let me think}\n              B --> G[/Another/]\n              C ==>|One| D[Laptop]\n              C -->|Two| E[iPhone]\n              C -->|Three| F[fa:fa-car Car]\n              subgraph section\n                C\n                D\n                E\n                F\n                G\n              end\n  </pre>\n\n  </pre>\n\n\n\\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 354
                },
                {
                    "name": "myContext",
                    "defaultValue": "{ $implicit: 'World', localSk: 'Svet' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "simpleform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'simpleform', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "subgraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'subgraph', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "tems",
                    "defaultValue": "this.fromTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "themes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'themes', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 383,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  AfterContentInit,\n  ViewChild,\n  TemplateRef,\n} from '@angular/core';\n\n\n@Component({\n  selector: 'app-mermaidcode',\n  templateUrl: './mermaid.component.html',\n})\nexport class MermaidComponent implements AfterContentInit {\n\n  @ViewChild('fromTemplate', { static: true })\n  fromTemplate!: TemplateRef<any>;\n\n  @ViewChild('fromComponent', { static: true })\n  fromComponent!: TemplateRef<any>;\n\n  @ViewChild('fromSrc', { static: true })\n  fromSrc!: TemplateRef<any>;\n\n\n  @ViewChild('subgraph', { static: true })\n  subgraph!: TemplateRef<any>;\n\n  @ViewChild('attachclass', { static: true })\n  attachclass!: TemplateRef<any>;\n\n  @ViewChild('simpleform', { static: true })\n  simpleform!: TemplateRef<any>;\n\n  @ViewChild('customcolors', { static: true })\n  customcolors!: TemplateRef<any>;\n\n  @ViewChild('fa', { static: true })\n  fa!: TemplateRef<any>;\n\n  @ViewChild('themes', { static: true })\n  themes!: TemplateRef<any>;\n\n\n  tems: TemplateRef<any> = this.fromTemplate;\n\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n  @Input()\n  myselectedtemp: string = 'fromComponent';\n\n\n\n  mermaidfromtemplate = `\n  ## keep a variable in component to load the value \n\n  \\`\\`\\`typescript\n  <markdown mermaid  ngPreserveWhitespaces>\n  <pre class=\"mermaid\">\n    flowchart TD\n    id1([Mermaid]) --> id2([Markdown in html])\n    id1([Mermaid]) -->  id3([Markdown in template])\n    id1([Mermaid]) --> id4([Markdown in data])\n    id1([Mermaid]) --> id5([Markdown loaded from src])\n  </pre>\n  </markdown>\n  \\`\\`\\`\n\n  `;\n\n  mermaidfromcomponent = `\n  <pre class=\"mermaid\">\n    flowchart TD\n    id1([Mermaid]) --> id2([Markdown in html])\n    id1([Mermaid]) -->  id3([Markdown in template])\n    id1([Mermaid]) --> id4([Markdown in data])\n    id1([Mermaid]) --> id5([Markdown loaded from src])\n  </pre>\n  </markdown>\n  `;\n\n  mermaidfromcomponentExplain = `\n  ## keep a variable in component to load the value \n\n  \\`\\`\\`typescript\n  mermaidfromcomponent = \\`\n  <pre class=\"mermaid\">\n    flowchart TD\n    id1([Mermaid]) --> id2([Markdown in html])\n    id1([Mermaid]) -->  id3([Markdown in template])\n    id1([Mermaid]) --> id4([Markdown in data])\n    id1([Mermaid]) --> id5([Markdown loaded from src])\n  </pre>\n  </markdown>\n  \\`\n  \\`\\`\\`\n\n  ## And call the variable from Template\n\n  \\`\\`\\`typescript\n  <markdown mermaid  ngPreserveWhitespaces>\n  {{ mermaidfromcomponent}}\n  </markdown>\n  \\`\\`\\`\n  `;\n\n  mermaidfromSrcExplain = `\n  # Working for app.component.html but not working in strories\n  ## Need to raise PR for storybook\n  \n  \\`\\`\\`typescript\n  <div class=\"markdown\" >\n  <markdown mermaid [src]=\"'./Testing.md'\"></markdown>\n  </div>\n  \\`\\`\\`\n\n  ## Testing.md file contains\n  \\`\\`\\`typescript\n  <pre class=\"mermaid\">\n  journey\n    title My Career Graph\n    section Before Tech\n    Secondary- 88%: 1: Manoj\n    Higher Secondary-89%: 2: Manoj\n    College-UG- 67%: 3: Manoj\n    College-PG- 74%: 4: Manoj\n    section After Tech\n    Lecturer- 1Y: 5: Manoj\n    Telecom Testing- 14Y: 6: Manoj\n    Development- 7Y: 7: Manoj\n  \n  </pre>\n  \\`\\`\\`\n  `;\n\n  mermaidsubgraph = `\n  <pre class=\"mermaid\">\n  flowchart TB\n  c1-->a2\n  subgraph one\n  a1-->a2\n  end\n  subgraph two\n  b1-->b2\n  end\n  subgraph three\n  c1-->c2\n  end\n</pre>\n  `;\n\n  mermaidsubgraphExplained = `\n  ## Easiliy we can explain ideas in subgraphs\n  \\`\\`\\`typescript\n  <pre class=\"mermaid\">\n  flowchart TB\n  c1-->a2\n  subgraph one\n  a1-->a2\n  end\n  subgraph two\n  b1-->b2\n  end\n  subgraph three\n  c1-->c2\n  end\n</pre>\n\\`\\`\\`\n  `;\n\n  mermaidattachclass = `\n  <pre class=\"mermaid\">\n  flowchart LR\n    A:::someclass --> B\n    classDef someclass fill:#f96;\n    </pre>\n  `;\n\n  mermaidattachclassExplained = `\n  \n  ## Easiliy we can explain relationship between classes\n  \\`\\`\\`typescript\n  <pre class=\"mermaid\">\n  flowchart LR\n    A:::someclass --> B\n    classDef someclass fill:#f96;\n    </pre>\n\\`\\`\\`\n  `;\n\n  mermaidsimpleform = `\n  <pre class=\"mermaid\">\n    graph LR\n    %% Nodes\n    1([Start])\n    2[Look for lost item]\n    3{Did I find it?}\n    4([Stop])\n    %% Node links\n    1 --> 2 --> 3 -->|Yes| 4\n    3 -.->|No| 2\n  </pre>\n  `;\n\n  mermaidsimpleformExplained = `\n  \n  ## Easiliy we can explain Simple Forms\n  \\`\\`\\`typescript\n  <pre class=\"mermaid\">\n    graph LR\n    %% Nodes\n    1([Start])\n    2[Look for lost item]\n    3{Did I find it?}\n    4([Stop])\n    %% Node links\n    1 --> 2 --> 3 -->|Yes| 4\n    3 -.->|No| 2\n  </pre>\n\\`\\`\\`\n  `;\n\n  mermaidcustomcolors = `\n  <pre class=\"mermaid\">\n\n  graph TD\n  %% Nodes\n      0[Key Variable]\n      1[Top Variable 1]\n      2[Top Variable 2]\n      3[Top Variable 3]\n      31[Sub Variable 1]\n      32[Sub Variable 2]\n      321[Element 1]\n      322[Element 2]\n\n  %% Links\n      0 --- 1\n      0 --- 2\n      0 --- 3\n      3 --- 31\n      3 --- 32\n      32 --- 321\n      32 --- 322\n\n          %% Defining the styles\n      classDef Red fill:#FF9999;\n      classDef Amber fill:#FFDEAD;\n      classDef Green fill:#BDFFA4;\n\n  %% Assigning styles to nodes\n      class 3,32,321 Red;\n      class 322 Amber;\n      class 1,2,31 Green;\n\n</pre>\n\n  `;\n\n  mermaidcustomcolorsExplained = `\n  \n  ## Easiliy we can explain with custom colors\n  \\`\\`\\`typescript\n  <pre class=\"mermaid\">\n\n  graph TD\n  %% Nodes\n      0[Key Variable]\n      1[Top Variable 1]\n      2[Top Variable 2]\n      3[Top Variable 3]\n      31[Sub Variable 1]\n      32[Sub Variable 2]\n      321[Element 1]\n      322[Element 2]\n\n  %% Links\n      0 --- 1\n      0 --- 2\n      0 --- 3\n      3 --- 31\n      3 --- 32\n      32 --- 321\n      32 --- 322\n\n          %% Defining the styles\n      classDef Red fill:#FF9999;\n      classDef Amber fill:#FFDEAD;\n      classDef Green fill:#BDFFA4;\n\n  %% Assigning styles to nodes\n      class 3,32,321 Red;\n      class 322 Amber;\n      class 1,2,31 Green;\n\n</pre>\n\n\\`\\`\\`\n  `;\n\n  mermaidfa = `\n  <pre class=\"mermaid\">\n  flowchart TD\n    B[\"fab:fa-twitter for peace\"]\n    B-->C[fa:fa-ban forbidden]\n    B-->D(fa:fa-spinner);\n    B-->E(A fa:fa-camera-retro perhaps?)\n</pre>\n\n\n  `;\n\n  mermaidfaExplained = `\n  \n  ## Font Awesome is not working - Mermaid is now only compatible with Font Awesome versions 4 and 5\n  \\`\\`\\`typescript\n  <pre class=\"mermaid\">\n    flowchart TD\n      B[\"fab:fa-twitter for peace\"]\n      B-->C[fa:fa-ban forbidden]\n      B-->D(fa:fa-spinner);\n      B-->E(A fa:fa-camera-retro perhaps?)\n  </pre>\n\n\n\\`\\`\\`\n  `;\n\n  mermaidthemes = `\n\n  <pre class=\"mermaid\">\n    %%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#ff0000'}}}%%\n            graph TD\n              A[Christmas] -->|Get money| B(Go shopping)\n              B --> C{Let me think}\n              B --> G[/Another/]\n              C ==>|One| D[Laptop]\n              C -->|Two| E[iPhone]\n              C -->|Three| F[fa:fa-car Car]\n              subgraph section\n                C\n                D\n                E\n                F\n                G\n              end\n  </pre>\n\n\n\n\n  `;\n\n  mermaidthemesExplained = `\n  \n  ## Themes is working\n  \\`\\`\\`typescript\n  <pre class=\"mermaid\">\n  <pre class=\"mermaid\">\n    %%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#ff0000'}}}%%\n            graph TD\n              A[Christmas] -->|Get money| B(Go shopping)\n              B --> C{Let me think}\n              B --> G[/Another/]\n              C ==>|One| D[Laptop]\n              C -->|Two| E[iPhone]\n              C -->|Three| F[fa:fa-car Car]\n              subgraph section\n                C\n                D\n                E\n                F\n                G\n              end\n  </pre>\n\n  </pre>\n\n\n\\`\\`\\`\n  `;\n\n  ngAfterContentInit() {\n    switch (this.myselectedtemp) {\n      case 'fromTemplate':\n        this.tems = this.fromTemplate;\n        break;\n      case 'fromComponent':\n        this.tems = this.fromComponent;\n        break;\n      case 'fromSrc':\n        this.tems = this.fromSrc;\n        break;\n      case 'subgraph':\n        this.tems = this.subgraph;\n        break;\n      case 'attachclass':\n        this.tems = this.attachclass;\n        break;\n\n      case 'simpleform':\n        this.tems = this.simpleform;\n        break;\n      case 'customcolors':\n        this.tems = this.customcolors;\n        break;\n      case 'fa':\n        this.tems = this.fa;\n        break;\n      case 'themes':\n        this.tems = this.themes;\n        break;\n\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ],
            "templateData": "<ng-template #fromTemplate>\n  <markdown mermaid ngPreserveWhitespaces>\n    <pre class=\"mermaid\">\n            flowchart TD\n            id1([Mermaid]) --> id2([Mermaid in html])\n            id1([Mermaid]) -->  id3([Mermaid in template])\n            id1([Mermaid]) --> id4([Mermaid in data])\n            id1([Mermaid]) --> id5([Mermaid loaded from src])\n          </pre>\n  </markdown>\n\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <div markdown ngPreserveWhitespaces>{{ mermaidfromtemplate}}</div>\n</ng-template>\n\n<ng-template #fromComponent>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown mermaid ngPreserveWhitespaces>\n    {{ mermaidfromcomponent}}\n  </markdown>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <div markdown ngPreserveWhitespaces>{{ mermaidfromcomponentExplain }}</div>\n</ng-template>\n\n<ng-template #fromSrc>\n  <div class=\"markdown\">\n    <markdown mermaid [src]=\"'./Testing.md'\"></markdown>\n  </div>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <div markdown ngPreserveWhitespaces>{{ mermaidfromSrcExplain }}</div>\n</ng-template>\n\n<ng-template #subgraph>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown mermaid ngPreserveWhitespaces>\n    {{ mermaidsubgraph}}\n  </markdown>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <div markdown ngPreserveWhitespaces>{{ mermaidsubgraphExplained }}</div>\n</ng-template>\n\n<ng-template #attachclass>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown mermaid ngPreserveWhitespaces>\n    {{ mermaidattachclass}}\n  </markdown>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <div markdown ngPreserveWhitespaces>{{ mermaidattachclassExplained }}</div>\n</ng-template>\n\n<ng-template #simpleform>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown mermaid ngPreserveWhitespaces>\n    {{ mermaidsimpleform}}\n  </markdown>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <div markdown ngPreserveWhitespaces>{{ mermaidsimpleformExplained }}</div>\n</ng-template>\n\n<ng-template #customcolors>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown mermaid ngPreserveWhitespaces>\n    {{ mermaidcustomcolors}}\n  </markdown>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <div markdown ngPreserveWhitespaces>{{ mermaidcustomcolorsExplained }}</div>\n</ng-template>\n\n<ng-template #fa>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown mermaid ngPreserveWhitespaces>\n    {{ mermaidfa}}\n  </markdown>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <div markdown ngPreserveWhitespaces>{{ mermaidfaExplained }}</div>\n</ng-template>\n\n<ng-template #themes>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown mermaid ngPreserveWhitespaces>\n    {{ mermaidthemes}}\n  </markdown>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <div markdown ngPreserveWhitespaces>{{ mermaidthemesExplained }}</div>\n</ng-template>\n\n<ng-container [ngTemplateOutlet]=\"tems\" [ngTemplateOutletContext]=\"myContext\">\n</ng-container>"
        },
        {
            "name": "PureInboxScreenComponent",
            "id": "component-PureInboxScreenComponent-a2a7eeb00ac2a85f7f53d8e5d01d055e9668334309ffacf44101b3d674b6bf2cac6b79f7180a5f4eef7b94f9afcd83ea6c9f5c2f08a088b8d0321d923a9fc335",
            "file": "src/app/components/pure-inbox-screen/pure-inbox-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pure-inbox-screen",
            "styleUrls": [],
            "styles": [],
            "template": "<div *ngIf=\"error\" class=\"page lists-show\">\n  <div class=\"wrapper-message\">\n    <span class=\"icon-face-sad\"></span>\n    <p class=\"title-message\">Oh no!</p>\n    <p class=\"subtitle-message\">Something went wrong</p>\n  </div>\n</div>\n\n<div *ngIf=\"!error\" class=\"page lists-show\">\n  <nav>\n    <h1 class=\"title-page\">Taskbox</h1>\n  </nav>\n  <app-task-list></app-task-list>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-pure-inbox-screen',\r\n  template: `\r\n    <div *ngIf=\"error\" class=\"page lists-show\">\r\n      <div class=\"wrapper-message\">\r\n        <span class=\"icon-face-sad\"></span>\r\n        <p class=\"title-message\">Oh no!</p>\r\n        <p class=\"subtitle-message\">Something went wrong</p>\r\n      </div>\r\n    </div>\r\n\r\n    <div *ngIf=\"!error\" class=\"page lists-show\">\r\n      <nav>\r\n        <h1 class=\"title-page\">Taskbox</h1>\r\n      </nav>\r\n      <app-task-list></app-task-list>\r\n    </div>\r\n  `,\r\n})\r\nexport  class PureInboxScreenComponent {\r\n  @Input() error: any;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "PureTaskListComponent",
            "id": "component-PureTaskListComponent-10b5f2a048e53a75ab8dee7f5fde8fa5fb65eec85db236cfb294c7766fe6674db53a5908edc7a9134b137f6825c1cb812bd0187f571b1843ab581acf0bbca006",
            "file": "src/app/components/pure-tasklist/pure-tasklist.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pure-tasklist",
            "styleUrls": [
                "./pure-tasklist.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./pure-tasklist.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "Task[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Task } from 'src/app/models/task.model';\n\n@Component({\n  selector: 'app-pure-tasklist',\n  templateUrl: './pure-tasklist.component.html',\n  styleUrls: ['./pure-tasklist.component.css']\n})\nexport class PureTaskListComponent {\n   /**\n   * @ignore\n   * Component property to define ordering of tasks\n   */\n   tasksInOrder: Task[] = [\n    { id: '1', title: 'Something', state: 'TASK_INBOX' },\n    { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n    { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n    { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n  ];\n\n  @Input() loading = false;\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output() onPinTask: EventEmitter<any> = new EventEmitter();\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\n\n  @Input()\n  set tasks(arr: Task[]) {\n    const initialTasks = [     \n      ...arr.filter((t) => t.state !== 'TASK_PINNED'),\n      ...arr.filter((t) => t.state === 'TASK_PINNED'),\n    ];\n    const filteredTasks = initialTasks.filter(\n      (t) => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\n    );\n    this.tasksInOrder = filteredTasks.filter(\n      (t) => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'\n    );\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./pure-tasklist.component.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "tasks": {
                    "name": "tasks",
                    "setSignature": {
                        "name": "tasks",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "arr",
                                "type": "Task[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 30,
                        "jsdoctags": [
                            {
                                "name": "arr",
                                "type": "Task[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div class=\"list-items\">\n    <app-task\n      *ngFor=\"let task of tasksInOrder\"\n      [task]=\"task\"\n      (onArchiveTask)=\"onArchiveTask.emit($event)\"\n      (onPinTask)=\"onPinTask.emit($event)\"\n    >\n    </app-task>\n    <div\n      *ngIf=\"tasksInOrder.length === 0 && !loading\"\n      class=\"wrapper-message\"\n    >\n      <span class=\"icon-check\"></span>\n      <p class=\"title-message\">You have no tasks</p>\n      <p class=\"subtitle-message\">Sit back and relax</p>\n    </div>\n    <div *ngIf=\"loading\">\n      <div *ngFor=\"let i of [1, 2, 3, 4, 5, 6]\" class=\"loading-item\">\n        <span class=\"glow-checkbox\"></span>\n        <span class=\"glow-text\">\n          <span>Loading</span> <span>cool</span> <span>state</span>\n        </span>\n      </div>\n    </div>\n  </div>"
        },
        {
            "name": "StorybookDesignComponent",
            "id": "component-StorybookDesignComponent-11d8d40aedf2142172f9f346f061d5673d29d604b912c63a6a808e46fad67d444db61a3d5145c86909aa59f5b531d4dbdd83b5978d3f216f50c1cbedb971d542",
            "file": "src/app/storybook-design/storybook-design.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-storybook-design",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./storybook-design.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "myselectedtemp",
                    "defaultValue": "'fromComponent'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addmdxsteps",
                    "defaultValue": "`\n  \n  # Refer to other stories and add them in the mdx file\n\n  ## MDX file should have the same name as the component to replace the docs\n\n  \\`\\`\\`powershell\n  import { Canvas, Meta, Story } from '@storybook/blocks';\n\nimport * as markdown from '../markdowncode/markdown.stories';\nimport * as mermaid from '../mermaidcode/mermaid.stories';\nimport * as task from './simpletask.stories';\n\n<Meta of={task} />\n\n# Checkbox\n\nA checkbox is a square box that can be activated or deactivated when ticked. \n\nUse checkboxes to select one or more options from a list of choices.\n\n## Usage\n\n<Story of={mermaid.MermaidFromTemplate} />\n\n# Checkbox\n\nA checkbox is a square box that can be activated or deactivated when ticked. \n\nUse checkboxes to select one or more options from a list of choices.\n\n## Usage\n\n<Story of={markdown.MarkdownFromTemplate} />\n\n\\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 202
                },
                {
                    "name": "addstory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'addstory', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "addstorysteps",
                    "defaultValue": "`\n  # Add the story here\n  \n  \\`\\`\\`powershell\nexport const ImportantSteps: StoryDetail = {\n  args: {\n    myselectedtemp: 'plan'\n  }\n};\n\\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 190
                },
                {
                    "name": "chromatic",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'chromatic', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "chromaticsteps",
                    "defaultValue": "`\n  \n  # Create Chromtic login and create a new project tocken\n  \\`\\`\\`powershell\n\n  \"chromatic\": \"npx chromatic --project-token=f38be8eee28a  --exit-once-uploaded\"\n  \n  \\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 290
                },
                {
                    "name": "fromplan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'plan', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "git",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'git', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "gitsteps",
                    "defaultValue": "`\n  \n  # Git commands to push to repo and gh-pages\n  \\`\\`\\`powershell\n  git remote remove origin\n  git remote add origin https://github.com/gmanojisaac/AngularStorybook.git\n  git remote -v show\n  git add .\n  git commit -am “Completed storybook design”\n  git push -u origin storydesign\n  npm run pre-deploy\n  npm run deploy-storybook\n\n  \\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 274
                },
                {
                    "name": "import",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'import', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "importsteps",
                    "defaultValue": "`\n\n  # Import Modules for story use\n  ## Import sharedModule which contains FlexBox, HTTPClient Module for MarkdownModule\n  ## Component is used in the StorybookdesignComponent\n\n  \\`\\`\\`powershell\n  moduleMetadata({\n\n    declarations: [StorybookDesignComponent],\n    imports: [\n      CommonModule,\n      SharedModule,\n      HttpClientModule,\n      MarkdownModule.forRoot({ loader: HttpClient }),\n    ]\n  }),\n  applicationConfig({\n    providers: [\n      importProvidersFrom(\n        CommonModule,\n        HttpClientModule,\n        MarkdownModule.forRoot({ loader: HttpClient }),\n        MarkdownService\n      ),\n    ],\n  }),\n  \\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "mdx",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'addmdx', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "meta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'meta', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "metasteps",
                    "defaultValue": "`\n  \\`\\`\\`powershell\nconst metaDetail: Meta<StorybookDesignComponent> = {\n\n  title: 'Setup/Storybook',\n  component: StorybookDesignComponent,\n  decorators: [\n    ...\n  ]\n};\n\nexport default metaDetail;\ntype StoryDetail = StoryObj<StorybookDesignComponent>;\n\\`\\`\\`\n---\n`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "myContext",
                    "defaultValue": "{ $implicit: 'World', localSk: 'Svet' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'order', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "ordersteps",
                    "defaultValue": "`\n  \n  # The order of the strories can be set in the preview.js -> parameters\n\n  \\`\\`\\`powershell\noptions: {\n    storySort: {\n      order: [\n       'YoutubeMaking', ['StorybookDesign'], 'Example', ['Page', '*']\n       ],\n    },\n  },\n     \n   \\`\\`\\`\n\n---\n   # For centering the stories, in Preview.js\n   \\`\\`\\`powershell\n   const preview: Preview = {\n    parameters: {\n      layout: 'centered',\n    \\`\\`\\`\n---\n   # To hide the Panel\n\n\\`\\`\\`powershell\noptions: {\n  storySort: {\n    order: [...\n    ],\n  },\n   showPanel: false\n \\`\\`\\`\n ---\n `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 239
                },
                {
                    "name": "structure",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'structure', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "structuresteps",
                    "defaultValue": "`\n  ## PageDesign __works__!\n  \\`\\`\\`powershell\n  <pre class=\"mermaid\">\n    flowchart TD\n      id1([Prepare ngTemplate]) -->  id2([Mmyselectedtemp receive input from story])\n\n      id2([myselectedtemp receive input from story]) -->  id3([Shows the template])\n\n      id3([Shows the template]) -->  id4([use templateOutlet and context])\n  </pre>\n  \\`\\`\\`\n  # In html use the different templates\n  \\`\\`\\`powershell\n  <ng-template #storydesign >\n  </ng-template>\n  \\`\\`\\`\n\n  # call the templates using templateOutlet and can pass a context\n\n  \\`\\`\\`powershell\n  <ng-container \n  [ngTemplateOutlet]=\"tems\"\n  [ngTemplateOutletContext]=\"myContext\"> \n  \\`\\`\\`\n\n  # use the context in html\n\n  \\`\\`\\`powershell\n  <ng-template #storydesign >\n  <h1>\n      Working\n  </h1>>\n  </ng-template>\n  <ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\n  <ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\n  <ng-template #svk let-person=\"localSk\" ><span>Ahoj {{person}}!</span></ng-template>\n\n  \\`\\`\\`\n\n  # use the context in component\n\n  \\`\\`\\`powershell\n  @ViewChild('greet', { static: true })\n  greet!: TemplateRef<any>;\n  @ViewChild('svk', { static: true })\n  svk!: TemplateRef<any>;\n  @ViewChild('eng', { static: true })\n  eng!: TemplateRef<any>;\n  @ViewChild('storydesign', { static: true })\n  storydesign!: TemplateRef<any>;\n\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n  tems: TemplateRef<any> = this.greet;\n  \\`\\`\\`\n\n  # use AfterContentInit\n\n  \\`\\`\\`powershell\n\n  import { OnInit, AfterContentInit, ViewChild, TemplateRef, Input, Component } from '@angular/core';\n\n  Component=>  implements OnInit, AfterContentInit {\n\n  @Input()\n  myselectedtemp: string = 'greet';\n\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'greet':\n        this.tems = this.greet;\n        break;\n      case 'svk':\n        this.tems = this.svk;\n        break;\n      case 'eng':\n        this.tems = this.eng;\n        break;\n      case 'storydesign':\n        this.tems = this.storydesign;\n        break;\n      }\n    }\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n  }\n\n  \\`\\`\\`\n  `",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "tems",
                    "defaultValue": "this.fromplan",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  Input,\n  AfterContentInit,\n  ViewChild,\n  TemplateRef,\n} from '@angular/core';\n\n@Component({\n  selector: 'app-storybook-design',\n  templateUrl: './storybook-design.component.html',\n})\nexport class StorybookDesignComponent implements AfterContentInit {\n\n\n  @ViewChild('plan', { static: true })\n  fromplan!: TemplateRef<any>;\n\n  @ViewChild('meta', { static: true })\n  meta!: TemplateRef<any>;\n\n  @ViewChild('import', { static: true })\n  import!: TemplateRef<any>;\n\n  @ViewChild('structure', { static: true })\n  structure!: TemplateRef<any>;\n\n  @ViewChild('addstory', { static: true })\n  addstory!: TemplateRef<any>;\n\n  @ViewChild('addmdx', { static: true })\n  mdx!: TemplateRef<any>;\n\n  @ViewChild('order', { static: true })\n  order!: TemplateRef<any>;\n\n  @ViewChild('git', { static: true })\n  git!: TemplateRef<any>;\n\n  @ViewChild('chromatic', { static: true })\n  chromatic!: TemplateRef<any>;\n\n\n  tems: TemplateRef<any> = this.fromplan;\n\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n\n  @Input()\n  myselectedtemp: string = 'fromComponent';\n\n\n  metasteps = `\n  \\`\\`\\`powershell\nconst metaDetail: Meta<StorybookDesignComponent> = {\n\n  title: 'Setup/Storybook',\n  component: StorybookDesignComponent,\n  decorators: [\n    ...\n  ]\n};\n\nexport default metaDetail;\ntype StoryDetail = StoryObj<StorybookDesignComponent>;\n\\`\\`\\`\n---\n`;\n  importsteps = `\n\n  # Import Modules for story use\n  ## Import sharedModule which contains FlexBox, HTTPClient Module for MarkdownModule\n  ## Component is used in the StorybookdesignComponent\n\n  \\`\\`\\`powershell\n  moduleMetadata({\n\n    declarations: [StorybookDesignComponent],\n    imports: [\n      CommonModule,\n      SharedModule,\n      HttpClientModule,\n      MarkdownModule.forRoot({ loader: HttpClient }),\n    ]\n  }),\n  applicationConfig({\n    providers: [\n      importProvidersFrom(\n        CommonModule,\n        HttpClientModule,\n        MarkdownModule.forRoot({ loader: HttpClient }),\n        MarkdownService\n      ),\n    ],\n  }),\n  \\`\\`\\`\n  `;\n  structuresteps = `\n  ## PageDesign __works__!\n  \\`\\`\\`powershell\n  <pre class=\"mermaid\">\n    flowchart TD\n      id1([Prepare ngTemplate]) -->  id2([Mmyselectedtemp receive input from story])\n\n      id2([myselectedtemp receive input from story]) -->  id3([Shows the template])\n\n      id3([Shows the template]) -->  id4([use templateOutlet and context])\n  </pre>\n  \\`\\`\\`\n  # In html use the different templates\n  \\`\\`\\`powershell\n  <ng-template #storydesign >\n  </ng-template>\n  \\`\\`\\`\n\n  # call the templates using templateOutlet and can pass a context\n\n  \\`\\`\\`powershell\n  <ng-container \n  [ngTemplateOutlet]=\"tems\"\n  [ngTemplateOutletContext]=\"myContext\"> \n  \\`\\`\\`\n\n  # use the context in html\n\n  \\`\\`\\`powershell\n  <ng-template #storydesign >\n  <h1>\n      Working\n  </h1>>\n  </ng-template>\n  <ng-template #greet let-person><span>Hello {{person}} </span></ng-template>\n  <ng-template #eng let-name><span>Hello {{name}}!</span></ng-template>\n  <ng-template #svk let-person=\"localSk\" ><span>Ahoj {{person}}!</span></ng-template>\n\n  \\`\\`\\`\n\n  # use the context in component\n\n  \\`\\`\\`powershell\n  @ViewChild('greet', { static: true })\n  greet!: TemplateRef<any>;\n  @ViewChild('svk', { static: true })\n  svk!: TemplateRef<any>;\n  @ViewChild('eng', { static: true })\n  eng!: TemplateRef<any>;\n  @ViewChild('storydesign', { static: true })\n  storydesign!: TemplateRef<any>;\n\n  myContext = { $implicit: 'World', localSk: 'Svet' };\n  tems: TemplateRef<any> = this.greet;\n  \\`\\`\\`\n\n  # use AfterContentInit\n\n  \\`\\`\\`powershell\n\n  import { OnInit, AfterContentInit, ViewChild, TemplateRef, Input, Component } from '@angular/core';\n\n  Component=>  implements OnInit, AfterContentInit {\n\n  @Input()\n  myselectedtemp: string = 'greet';\n\n  ngAfterContentInit() {\n\n    switch (this.myselectedtemp) {\n      case 'greet':\n        this.tems = this.greet;\n        break;\n      case 'svk':\n        this.tems = this.svk;\n        break;\n      case 'eng':\n        this.tems = this.eng;\n        break;\n      case 'storydesign':\n        this.tems = this.storydesign;\n        break;\n      }\n    }\n\n    constructor() { }\n\n    ngOnInit(): void {\n    }\n  }\n\n  \\`\\`\\`\n  `;\n  addstorysteps = `\n  # Add the story here\n  \n  \\`\\`\\`powershell\nexport const ImportantSteps: StoryDetail = {\n  args: {\n    myselectedtemp: 'plan'\n  }\n};\n\\`\\`\\`\n  `;\n\n  addmdxsteps= `\n  \n  # Refer to other stories and add them in the mdx file\n\n  ## MDX file should have the same name as the component to replace the docs\n\n  \\`\\`\\`powershell\n  import { Canvas, Meta, Story } from '@storybook/blocks';\n\nimport * as markdown from '../markdowncode/markdown.stories';\nimport * as mermaid from '../mermaidcode/mermaid.stories';\nimport * as task from './simpletask.stories';\n\n<Meta of={task} />\n\n# Checkbox\n\nA checkbox is a square box that can be activated or deactivated when ticked. \n\nUse checkboxes to select one or more options from a list of choices.\n\n## Usage\n\n<Story of={mermaid.MermaidFromTemplate} />\n\n# Checkbox\n\nA checkbox is a square box that can be activated or deactivated when ticked. \n\nUse checkboxes to select one or more options from a list of choices.\n\n## Usage\n\n<Story of={markdown.MarkdownFromTemplate} />\n\n\\`\\`\\`\n  `;\n  ordersteps = `\n  \n  # The order of the strories can be set in the preview.js -> parameters\n\n  \\`\\`\\`powershell\noptions: {\n    storySort: {\n      order: [\n       'YoutubeMaking', ['StorybookDesign'], 'Example', ['Page', '*']\n       ],\n    },\n  },\n     \n   \\`\\`\\`\n\n---\n   # For centering the stories, in Preview.js\n   \\`\\`\\`powershell\n   const preview: Preview = {\n    parameters: {\n      layout: 'centered',\n    \\`\\`\\`\n---\n   # To hide the Panel\n\n\\`\\`\\`powershell\noptions: {\n  storySort: {\n    order: [...\n    ],\n  },\n   showPanel: false\n \\`\\`\\`\n ---\n `;\n  gitsteps = `\n  \n  # Git commands to push to repo and gh-pages\n  \\`\\`\\`powershell\n  git remote remove origin\n  git remote add origin https://github.com/gmanojisaac/AngularStorybook.git\n  git remote -v show\n  git add .\n  git commit -am “Completed storybook design”\n  git push -u origin storydesign\n  npm run pre-deploy\n  npm run deploy-storybook\n\n  \\`\\`\\`\n  `;\n\n  chromaticsteps = `\n  \n  # Create Chromtic login and create a new project tocken\n  \\`\\`\\`powershell\n\n  \"chromatic\": \"npx chromatic --project-token=f38be8eee28a  --exit-once-uploaded\"\n  \n  \\`\\`\\`\n  `;\n\n\n  ngAfterContentInit() {\n    switch (this.myselectedtemp) {\n      case 'plan':\n        this.tems = this.fromplan;\n        break;\n      case 'meta':\n        this.tems = this.meta;\n        break;\n      case 'import':\n        this.tems = this.import;\n        break;\n      case 'structure':\n        this.tems = this.structure;\n        break;\n      case 'addstory':\n        this.tems = this.addstory;\n        break;\n      case 'mdx':\n        this.tems = this.mdx;\n        break;\n      case 'order':\n        this.tems = this.order;\n        break;\n      case 'git':\n        this.tems = this.git;\n        break;\n      case 'chromatic':\n        this.tems = this.chromatic;\n        break;\n\n    }\n\n\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ],
            "templateData": "<ng-template #plan>\n    <markdown mermaid ngPreserveWhitespaces>\n      <pre class=\"mermaid\">\n          flowchart TD\n            id44([Main Steps]) -->  id4([1.Modify Meta])\n            id4([1.Modify Meta]) -->  id5([2.Import Modules])\n            id5([2.Import Modules]) -->  id6([3.Prepare FileStructure])\n            id6([3.Prepare FileStructure])  -->  id7([4.Add Story])\n            id7([4.Add Story]) --> id8([.Re-use stories for MDX])\n            id8([5.Re-use stories for MDX]) --> id9([6.Modify Order])\n            id9([6.Modify Order]) -->  id10([7.Git Commands])\n            id10([7.Git Commands]) -->  id11([8.Chromatic deploy for visual testing])\n            \n        </pre>\n    </markdown>\n</ng-template>\n    \n<ng-template #meta>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown ngPreserveWhitespaces fxFlex=\"grow\" >\n  {{metasteps}}\n  </markdown>\n</ng-template>\n\n<ng-template #import>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown ngPreserveWhitespaces commandLine [prompt]=\"'PS C:\\Manoj>'\" [filterOutput]=\"'(out)'\" fxFlex=\"grow\" >\n  {{importsteps}}\n  </markdown>\n</ng-template>\n\n<ng-template #structure>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown ngPreserveWhitespaces commandLine [prompt]=\"'PS C:\\Manoj>'\" [filterOutput]=\"'(out)'\" fxFlex=\"grow\" >\n  {{structuresteps}}\n  </markdown>\n</ng-template>\n\n<ng-template #addstory>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown ngPreserveWhitespaces commandLine [prompt]=\"'PS C:\\Manoj>'\" [filterOutput]=\"'(out)'\" fxFlex=\"grow\" >\n  {{addstorysteps}}\n  </markdown>\n</ng-template>\n\n<ng-template #addmdx>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown ngPreserveWhitespaces commandLine [prompt]=\"'PS C:\\Manoj>'\" [filterOutput]=\"'(out)'\" fxFlex=\"grow\" >\n  {{addmdxsteps}}\n  </markdown>\n</ng-template>\n\n<ng-template #order>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown ngPreserveWhitespaces commandLine [prompt]=\"'PS C:\\Manoj>'\" [filterOutput]=\"'(out)'\" fxFlex=\"grow\" >\n  {{ordersteps}}\n  </markdown>\n</ng-template>\n\n<ng-template #git>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown ngPreserveWhitespaces commandLine [prompt]=\"'PS C:\\Manoj>'\" [filterOutput]=\"'(out)'\" fxFlex=\"grow\" >\n  {{gitsteps}}\n  </markdown>\n</ng-template>\n\n<ng-template #chromatic>\n  <markdown ngPreserveWhitespaces> --- </markdown>\n  <markdown ngPreserveWhitespaces commandLine [prompt]=\"'PS C:\\Manoj>'\" [filterOutput]=\"'(out)'\" fxFlex=\"grow\" >\n  {{chromaticsteps}}\n  </markdown>\n</ng-template>\n\n\n\n\n\n\n\n\n<ng-container [ngTemplateOutlet]=\"tems\" [ngTemplateOutletContext]=\"myContext\">\n    </ng-container>\n\n\n"
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-3d7dc10d8ec2a72c85c8be4f2abf1bf4075af2deb749202c8c44218616d60429bc7b7112ef65d453e3a257ed4304d837233164361b25a1a411f820617985a0ba",
            "file": "src/app/components/task/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [
                "./task.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./task.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Task",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onArchiveTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPinTask",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onArchive",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onArchive event\n",
                    "description": "<p>Component method to trigger the onArchive event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 716,
                                "end": 718,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 710,
                                "end": 715,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                },
                {
                    "name": "onPin",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the onPin event\n",
                    "description": "<p>Component method to trigger the onPin event</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 577,
                                "end": 579,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 571,
                                "end": 576,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>string</p>\n"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Task } from '../../models/task.model';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.css']\n})\nexport class TaskComponent {\n  @Input()\n  task!: Task;\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output()\n  onPinTask = new EventEmitter<Event>();\n\n  // tslint:disable-next-line: no-output-on-prefix\n  @Output()\n  onArchiveTask = new EventEmitter<Event>();\n\n  /**\n   * Component method to trigger the onPin event\n   * @param id string\n   */\n  onPin(id: any) {\n    this.onPinTask.emit(id);\n  }\n  /**\n   * Component method to trigger the onArchive event\n   * @param id string\n   */\n  onArchive(id: any) {\n    this.onArchiveTask.emit(id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list-item {\r\n    font-size: 14px;\r\n    line-height: 20px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    height: 3rem;\r\n    width: 100%;\r\n    background: white;\r\n    transition: all ease-out 150ms;\r\n  }\r\n  \r\n  .list-item .title {\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    flex: 1;\r\n  }\r\n  \r\n  .list-item input[type=\"text\"] {\r\n    background: transparent;\r\n    width: 100%;\r\n  }\r\n  \r\n  .list-item input[type=\"text\"]:focus {\r\n    cursor: text;\r\n  }\r\n  \r\n  h1,\r\n  p,\r\n  label {\r\n    margin: 0;\r\n    padding: 0;\r\n    border: 0;\r\n    font-weight: normal;\r\n    font-style: normal;\r\n    font-size: 100%;\r\n    line-height: 1;\r\n    font-family: inherit;\r\n    vertical-align: baseline;\r\n    line-height: normal;\r\n    font-family: \"Nunito Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n  }",
                    "styleUrl": "./task.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"list-item {{ task.state }}\">\n    <label\n      [attr.aria-label]=\"'archiveTask-' + task.id\"\n      for=\"checked-{{ task.id }}\"\n      class=\"checkbox\"\n    >\n      <input\n        type=\"checkbox\"\n        disabled=\"true\"\n        [defaultChecked]=\"task.state === 'TASK_ARCHIVED'\"\n        name=\"checked-{{ task.id }}\"\n        id=\"checked-{{ task.id }}\"\n      />\n      <span class=\"checkbox-custom\" (click)=\"onArchive(task.id)\"></span>\n    </label>\n    <label\n      [attr.aria-label]=\"task.title + ''\"\n      for=\"title-{{ task.id }}\"\n      class=\"title\"\n    >\n      <input\n        type=\"text\"\n        [value]=\"task.title\"\n        readonly=\"true\"\n        id=\"title-{{ task.id }}\"\n        name=\"title-{{ task.id }}\"\n        placeholder=\"Input title\"\n      />\n    </label>\n    <button\n      *ngIf=\"task?.state !== 'TASK_ARCHIVED'\"\n      class=\"pin-button\"\n      [attr.aria-label]=\"'pinTask-' + task.id\"\n      (click)=\"onPin(task.id)\"\n    >\n      <span class=\"icon-star\"></span>\n    </button>\n  </div>"
        },
        {
            "name": "TaskListComponent",
            "id": "component-TaskListComponent-f7d69fc96f9a04bb22976a8f00b885bff4f4990dc0267ff0ccf6a8f211963954295dcdbdc0ea90817da6fdedda31c02db1761a7f99fa861ddbda035ef90b3fe3",
            "file": "src/app/components/tasklist/tasklist.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task-list",
            "styleUrls": [],
            "styles": [],
            "template": "<app-pure-tasklist\n  [tasks]=\"tasks$ | async\"\n  (onArchiveTask)=\"archiveTask($event)\"\n  (onPinTask)=\"pinTask($event)\"\n></app-pure-tasklist>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "tasks$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<any>",
                    "optional": true,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "archiveTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the archiveTask event\n",
                    "description": "<p>Component method to trigger the archiveTask event</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "pinTask",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nComponent method to trigger the pinTask event\n",
                    "description": "<p>Component method to trigger the pinTask event</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { ArchiveTask, PinTask } from '../../state/task.state';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-task-list',\r\n  template: `\r\n    <app-pure-tasklist\r\n      [tasks]=\"tasks$ | async\"\r\n      (onArchiveTask)=\"archiveTask($event)\"\r\n      (onPinTask)=\"pinTask($event)\"\r\n    ></app-pure-tasklist>\r\n  `,\r\n})\r\nexport  class TaskListComponent {\r\n  tasks$?: Observable<any>;\r\n\r\n  constructor(private store: Store) {\r\n     this.tasks$ = store.select((state) => state.taskbox.tasks);\r\n  }\r\n\r\n  /**\r\n   * Component method to trigger the archiveTask event\r\n   */\r\n  archiveTask(id: string) {\r\n    this.store.dispatch(new ArchiveTask(id));\r\n  }\r\n\r\n  /**\r\n   * Component method to trigger the pinTask event\r\n   */\r\n  pinTask(id: string) {\r\n    this.store.dispatch(new PinTask(id));\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "YoutubeComponent",
            "id": "component-YoutubeComponent-32e98fd4705db72762337352ae89c30b87f2fee536bd5ede6d4b0076751f9654af62a6881402b18c7c07f8d760042c296d54acbc1a0d5b7ddec412a3ca321eae",
            "file": "src/app/youtube/youtube.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-youtube",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./youtube.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-youtube',\n  templateUrl: './youtube.component.html',\n  \n})\nexport class YoutubeComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<markdown mermaid ngPreserveWhitespaces>\n    <pre class=\"mermaid\">\n        flowchart TD\n        id1((( Angular-16, Storybook 7, Taskbox with NGXS  )))\n        style id1 fill:#f9f,stroke:#333,stroke-width:10px, font-size: 13px,padding-top: 4px\n    \n          </pre>\n  </markdown>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-be93cad058780da705619ff6d2ef1444e36b510b3f602c4c3eb74a73917152056d23936af49242196cef9a138b01f2180d502f9c8055fb8931a53115a74b9a70",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { TaskModule } from './components/task.module';\r\n import { NgxsModule } from '@ngxs/store';\r\n import { NgxsReduxDevtoolsPluginModule } from '@ngxs/devtools-plugin';\r\n import { NgxsLoggerPluginModule } from '@ngxs/logger-plugin';\r\n import { MarkdownModule } from 'ngx-markdown';\r\n\r\n\r\n\r\n import { environment } from '../environments/environment';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { PureInboxScreenComponent } from './components/pure-inbox-screen/pure-inbox-screen.component';\r\nimport { InboxScreenComponent } from './components/inbox-screen/inbox-screen.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { MarkdownComponent } from './markdown/markdown.component';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { MermaidComponent } from './mermaid/mermaid.component';\nimport { YoutubeComponent } from './youtube/youtube.component';\nimport { StorybookDesignComponent } from './storybook-design/storybook-design.component';\nimport { HideComponent } from './hide/hide.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    PureInboxScreenComponent,\r\n    InboxScreenComponent,\r\n    MarkdownComponent,\r\n    MermaidComponent,\r\n    YoutubeComponent,\r\n    StorybookDesignComponent,\r\n    HideComponent,\r\n    \r\n    \r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    TaskModule,\r\n    HttpClientModule,\r\n    MarkdownModule.forRoot({ loader: HttpClient }),\r\n    NgxsModule.forRoot([], {\r\n    developmentMode: !environment.production,\r\n \r\n\r\n    }),\r\n    NgxsReduxDevtoolsPluginModule.forRoot(),\r\n    NgxsLoggerPluginModule.forRoot({\r\n    disabled: environment.production,\r\n    }),\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HideComponent"
                        },
                        {
                            "name": "InboxScreenComponent"
                        },
                        {
                            "name": "MarkdownComponent"
                        },
                        {
                            "name": "MermaidComponent"
                        },
                        {
                            "name": "PureInboxScreenComponent"
                        },
                        {
                            "name": "StorybookDesignComponent"
                        },
                        {
                            "name": "YoutubeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "TaskModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-78922b3ae99d2c5249b333980bd5afde1b120b2cc6fedfd41b8b2cc90f279797cb4b22e183bf7e1d1dfab8c6100e77e7812c110234d81f866f544f28a3e18b15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TaskModule",
            "id": "module-TaskModule-dc67907c894a478d0cad80fedbfabc2f6c88c7f2d8d814a08bf5f34b78590ea7f4ee647be8546a5dff2ee1877aaf20558f124e08d789fb2b4c0e0e3116b3ccaa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/components/task.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxsModule } from '@ngxs/store';\r\n\r\nimport { TaskComponent } from './task/task.component';\r\nimport { TaskListComponent } from './tasklist/tasklist.component';\r\nimport { TasksState } from '../state/task.state';\r\nimport { PureTaskListComponent } from './pure-tasklist/pure-tasklist.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, NgxsModule.forFeature([TasksState])],\r\n  exports: [TaskComponent, TaskListComponent],\r\n  declarations: [TaskComponent, TaskListComponent, PureTaskListComponent],\r\n  providers: [],\r\n})\r\nexport class TaskModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PureTaskListComponent"
                        },
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TaskComponent"
                        },
                        {
                            "name": "TaskListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/task.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n\r\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/markdown/markdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
            },
            {
                "name": "AddMDX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/storybook-design/storybook-design.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'mdx'\r\n  }\r\n}"
            },
            {
                "name": "AddStory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/storybook-design/storybook-design.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'addstory'\r\n  }\r\n}"
            },
            {
                "name": "Archived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\nargs:{\r\n  task: {\r\n    id: '1',\r\n    title: 'Test Task',\r\n    state: 'TASK_ARCHIVED',\r\n  }\r\n}\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-inbox-screen/pure-inbox-screen.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "tasklistStyleStory",
                "defaultValue": "{\r\n    args: {\r\n        tasks: [\r\n            { ...(TaskStory.DefaultTask.args?.['task'] as Task), id: '1', title: 'Task 1' },\r\n            { ...(TaskStory.DefaultTask.args?.['task'] as Task), id: '2', title: 'Task 2' },\r\n            { ...(TaskStory.DefaultTask.args?.['task'] as Task), id: '3', title: 'Task 3' },\r\n            { ...(TaskStory.DefaultTask.args?.['task'] as Task), id: '4', title: 'Task 4' },\r\n            { ...(TaskStory.DefaultTask.args?.['task'] as Task), id: '5', title: 'Task 5' },\r\n            { ...(TaskStory.DefaultTask.args?.['task'] as Task), id: '6', title: 'Task 6' },\r\n            { ...(TaskStory.DefaultTask.args?.['task'] as Task), id: '7', title: 'Task 7' },\r\n          ],\r\n      }\r\n}"
            },
            {
                "name": "DefaultTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\nargs: {\r\n    task: {\r\n      id: '1',\r\n      title: 'Test Task',\r\n      state: 'TASK_INBOX',\r\n    }\r\n  },\r\n}"
            },
            {
                "name": "defaultTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/state/task.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n]"
            },
            {
                "name": "DeployChromatic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/storybook-design/storybook-design.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'chromatic'\r\n  }\r\n}"
            },
            {
                "name": "Empty",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "tasklistStyleStory",
                "defaultValue": "{\r\n  args: {\r\n    ...Loading.args,\r\n    loading: false,\r\n    }\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: true\r\n  }"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    production: false\r\n  }"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-inbox-screen/pure-inbox-screen.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    error: true,\r\n  },\r\n}"
            },
            {
                "name": "FileStructure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/storybook-design/storybook-design.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'structure'\r\n  }\r\n}"
            },
            {
                "name": "GitComamnds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/storybook-design/storybook-design.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'git'\r\n  }\r\n}"
            },
            {
                "name": "ImportantSteps",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/storybook-design/storybook-design.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'plan'\r\n  }\r\n}"
            },
            {
                "name": "ImportModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/storybook-design/storybook-design.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'import'\r\n  }\r\n}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "tasklistStyleStory",
                "defaultValue": "{\r\n  args: {\r\n    tasks: [],\r\n    loading: true\r\n    }\r\n}"
            },
            {
                "name": "LongTitle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\nargs:{\r\n  task: {\r\n    ...(DefaultTask?.args?.['task'] as Task),\r\n    title: longTitleString,\r\n  },\r\n}\r\n}"
            },
            {
                "name": "longTitleString",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`This task's name is absurdly large. In fact, I think if I keep going I might end up with content overflow. What will happen? The star that represents a pinned task could have text overlapping. The text could cut-off abruptly when it reaches the star. I hope not!`"
            },
            {
                "name": "MarkdownFromComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/markdown/markdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n    args:{\r\n      myselectedtemp : 'fromComponent'\r\n    }\r\n    }"
            },
            {
                "name": "MarkdownFromsrc",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/markdown/markdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n      args:{\r\n        myselectedtemp : 'fromSrc'\r\n      }\r\n      }"
            },
            {
                "name": "MarkdownFromTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/markdown/markdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args:{\r\n    myselectedtemp : 'fromTemplate'\r\n  }\r\n  }"
            },
            {
                "name": "MermaidAttachClass",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'attachclass'\r\n  }\r\n}"
            },
            {
                "name": "MermaidCustomColors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'customcolors'\r\n  }\r\n}"
            },
            {
                "name": "MermaidFontawesome",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'fa'\r\n  }\r\n}"
            },
            {
                "name": "MermaidFromComponent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'fromComponent'\r\n  }\r\n}"
            },
            {
                "name": "MermaidFromSrc",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'fromSrc'\r\n  }\r\n}"
            },
            {
                "name": "MermaidFromTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'fromTemplate'\r\n  }\r\n}"
            },
            {
                "name": "MermaidSimpleform",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'simpleform'\r\n  }\r\n}"
            },
            {
                "name": "MermaidSubgraph",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'subgraph'\r\n  }\r\n}"
            },
            {
                "name": "MermaidThemes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'themes'\r\n  }\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-inbox-screen/pure-inbox-screen.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PureInboxScreenComponent>",
                "defaultValue": "{\r\n  component: PureInboxScreenComponent,\r\n  title: 'Task/PureInboxScreen',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [CommonModule, TaskModule],\r\n    }),\r\n    applicationConfig({\r\n     providers: [Store, importProvidersFrom(NgxsModule.forRoot([TasksState]))],\r\n    }),\r\n  ],\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<TaskComponent>",
                "defaultValue": "{\r\n  /* 👇 The title prop is optional.\r\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\r\n   * to learn how to generate automatic titles\r\n   */\r\n  title: 'Task/TaskComponent',\r\n  component: TaskComponent,\r\n\r\n}"
            },
            {
                "name": "metaDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/hide/hide.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HideComponent>",
                "defaultValue": "{\r\n\r\n    \r\n  title: 'Hide/Task',\r\n  component: HideComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      //👇 Imports both components to allow component composition with storybook\r\n      declarations: [HideComponent],\r\n      imports: [\r\n        CommonModule,\r\n        // SharedModule,\r\n        HttpClientModule,\r\n        MarkdownModule.forRoot({ loader: HttpClient }),\r\n      ]\r\n    }),\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(\r\n          CommonModule,\r\n          HttpClientModule,\r\n          MarkdownModule.forRoot({ loader: HttpClient }),\r\n          MarkdownService\r\n        ),\r\n      ],\r\n    }),\r\n    componentWrapperDecorator(story => `<app-hide-story [myselectedtemp]= \"myselectedtemp\"></app-hide-story>`)\r\n  ]\r\n}"
            },
            {
                "name": "metaDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/markdown/markdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<MarkdownComponent>",
                "defaultValue": "{\r\n\r\n  title: 'Setup/Markdown',\r\n  component: MarkdownComponent,\r\n  decorators:[\r\n    moduleMetadata({\r\n        //👇 Imports both components to allow component composition with storybook\r\n        declarations: [MarkdownComponent],\r\n        imports: [            \r\n            CommonModule,\r\n            // SharedModule,\r\n            HttpClientModule,\r\n            MarkdownModule.forRoot({loader: HttpClient}),\r\n        ],\r\n        providers:[MarkdownService]\r\n      }),\r\n      applicationConfig({\r\n        providers: [\r\n          importProvidersFrom(\r\n            MarkdownService\r\n          ),\r\n        ],\r\n      }),\r\n  componentWrapperDecorator(story => `<app-markdowncode [myselectedtemp]= \"myselectedtemp\"></app-markdowncode>`)\r\n  ]\r\n}"
            },
            {
                "name": "metaDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<MermaidComponent>",
                "defaultValue": "{\r\n  /* 👇 The title prop is optional.\r\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\r\n   * to learn how to generate automatic titles\r\n   */\r\n  title: 'Setup/Mermaid',\r\n  component: MermaidComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      //👇 Imports both components to allow component composition with storybook\r\n      declarations: [MermaidComponent],\r\n      imports: [\r\n        CommonModule,\r\n        // SharedModule,\r\n        HttpClientModule,\r\n        MarkdownModule.forRoot({ loader: HttpClient }),\r\n      ]\r\n    }),\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(\r\n          CommonModule,\r\n          HttpClientModule,\r\n          MarkdownModule.forRoot({ loader: HttpClient }),\r\n          MarkdownService\r\n        ),\r\n      ],\r\n    }),\r\n    componentWrapperDecorator(story => `<app-mermaidcode [myselectedtemp]= \"myselectedtemp\"></app-mermaidcode>`)\r\n  ]\r\n}"
            },
            {
                "name": "metaDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/storybook-design/storybook-design.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<StorybookDesignComponent>",
                "defaultValue": "{\r\n\r\n  title: 'Setup/Storybook',\r\n  component: StorybookDesignComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      //👇 Imports both components to allow component composition with storybook\r\n      declarations: [StorybookDesignComponent],\r\n      imports: [\r\n        CommonModule,\r\n        // SharedModule,\r\n        HttpClientModule,\r\n        MarkdownModule.forRoot({ loader: HttpClient }),\r\n      ]\r\n    }),\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(\r\n          CommonModule,\r\n          HttpClientModule,\r\n          MarkdownModule.forRoot({ loader: HttpClient }),\r\n          MarkdownService\r\n        ),\r\n      ],\r\n    }),\r\n    componentWrapperDecorator(story => `<app-storybook-design [myselectedtemp]= \"myselectedtemp\"></app-storybook-design>`)\r\n  ]\r\n}"
            },
            {
                "name": "metaDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/youtube/youtube.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<YoutubeComponent>",
                "defaultValue": "{\r\n  /* 👇 The title prop is optional.\r\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\r\n   * to learn how to generate automatic titles\r\n   */\r\n  title: 'Youtube/Title',\r\n  component: YoutubeComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      //👇 Imports both components to allow component composition with storybook\r\n      declarations: [YoutubeComponent],\r\n      imports: [\r\n        CommonModule,\r\n        // SharedModule,\r\n        HttpClientModule,\r\n        MarkdownModule.forRoot({ loader: HttpClient }),\r\n      ]\r\n    }),\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(\r\n          CommonModule,\r\n          HttpClientModule,\r\n          MarkdownModule.forRoot({ loader: HttpClient }),\r\n          MarkdownService\r\n        ),\r\n      ],\r\n    }),\r\n    componentWrapperDecorator(story => `<app-youtube [myselectedtemp]= \"myselectedtemp\"></app-youtube>`)\r\n  ]\r\n}"
            },
            {
                "name": "metaDetail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PureTaskListComponent>",
                "defaultValue": "{\r\n\r\n  title: 'Task/TaskListComponent',\r\n  component: PureTaskListComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [PureTaskListComponent, TaskComponent],\r\n      imports: [\r\n        CommonModule,\r\n        HttpClientModule,\r\n        \r\n      ]\r\n    }),\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(\r\n          CommonModule,\r\n          HttpClientModule,\r\n   \r\n        ),\r\n      ],\r\n    }),\r\n    componentWrapperDecorator(story => `<div style=\"margin: 3em\">${story}</div>`)\r\n  ]\r\n}"
            },
            {
                "name": "ModifyMetaData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/storybook-design/storybook-design.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'meta'\r\n  }\r\n}"
            },
            {
                "name": "ModifyPreview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/storybook-design/storybook-design.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'order'\r\n  }\r\n}"
            },
            {
                "name": "Pinned",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args:{\r\n    task: {\r\n      id: '1',\r\n      title: 'Test Task',\r\n      state: 'TASK_PINNED',\r\n    },\r\n  }\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    layout: 'centered',\n    options: {\n      storySort: {\n        order: [\n          'Youtube',\n          ['Title'],\n          'Setup',\n          [  'Markdown', 'Mermaid'],\n          'Task',\n          ['Task', 'TaskList'],\n          'Screen',\n          ['InboxScreen']\n        ],\n      },\n       showPanel: false \n    },\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            },
            {
                "name": "ShowClipboard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/markdown/markdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n          args:{\r\n            myselectedtemp : 'showclipboard'\r\n          }\r\n          }"
            },
            {
                "name": "ShowCommandline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/markdown/markdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n        args:{\r\n          myselectedtemp : 'showcommandline'\r\n        }\r\n        }"
            },
            {
                "name": "SimpleTaskMermaid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/hide/hide.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\t\r\n  args: {\t\r\n    myselectedtemp: 'simpleTask'\t\r\n  }\t\r\n}"
            },
            {
                "name": "TaskListMermaid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/hide/hide.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\t\r\n  args: {\t\r\n    myselectedtemp: 'taskList'\t\r\n  }\t\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "tasklistStyleStory",
                "defaultValue": "{\r\n    args: {\r\n        onPinTask: TaskStory.DefaultTask.args?.onPinTask,\r\n        onArchiveTask: TaskStory.DefaultTask.args?.onArchiveTask,\r\n      }\r\n}"
            },
            {
                "name": "Title",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/youtube/youtube.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryDetail",
                "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'plan'\r\n  }\r\n}"
            },
            {
                "name": "WithPinnedTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "tasklistStyleStory",
                "defaultValue": "{\r\n  args: {\r\n    tasks: [\r\n        ...(Default.args?.['tasks'] as Task[]).slice(0,5),\r\n      { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\r\n    ],\r\n    }\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PureInboxScreenComponent>",
                "file": "src/app/components/pure-inbox-screen/pure-inbox-screen.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TaskComponent>",
                "file": "src/app/components/task/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "StoryDetail",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HideComponent>",
                "file": "src/app/hide/hide.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "StoryDetail",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<MarkdownComponent>",
                "file": "src/app/markdown/markdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "StoryDetail",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<MermaidComponent>",
                "file": "src/app/mermaid/mermaid.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "StoryDetail",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StorybookDesignComponent>",
                "file": "src/app/storybook-design/storybook-design.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "StoryDetail",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<YoutubeComponent>",
                "file": "src/app/youtube/youtube.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "tasklistStyleStory",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PureTaskListComponent>",
                "file": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/state/task.state.ts": [
                {
                    "name": "actions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/task.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  ARCHIVE_TASK: 'ARCHIVE_TASK',\r\n  PIN_TASK: 'PIN_TASK',\r\n  ERROR: 'APP_ERROR',\r\n\r\n}"
                },
                {
                    "name": "defaultTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/state/task.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  { id: '1', title: 'Something', state: 'TASK_INBOX' },\r\n  { id: '2', title: 'Something more', state: 'TASK_INBOX' },\r\n  { id: '3', title: 'Something else', state: 'TASK_INBOX' },\r\n  { id: '4', title: 'Something again', state: 'TASK_INBOX' },\r\n]"
                }
            ],
            "src/app/markdown/markdown.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/markdown/markdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
                },
                {
                    "name": "MarkdownFromComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/markdown/markdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n    args:{\r\n      myselectedtemp : 'fromComponent'\r\n    }\r\n    }"
                },
                {
                    "name": "MarkdownFromsrc",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/markdown/markdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n      args:{\r\n        myselectedtemp : 'fromSrc'\r\n      }\r\n      }"
                },
                {
                    "name": "MarkdownFromTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/markdown/markdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args:{\r\n    myselectedtemp : 'fromTemplate'\r\n  }\r\n  }"
                },
                {
                    "name": "metaDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/markdown/markdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<MarkdownComponent>",
                    "defaultValue": "{\r\n\r\n  title: 'Setup/Markdown',\r\n  component: MarkdownComponent,\r\n  decorators:[\r\n    moduleMetadata({\r\n        //👇 Imports both components to allow component composition with storybook\r\n        declarations: [MarkdownComponent],\r\n        imports: [            \r\n            CommonModule,\r\n            // SharedModule,\r\n            HttpClientModule,\r\n            MarkdownModule.forRoot({loader: HttpClient}),\r\n        ],\r\n        providers:[MarkdownService]\r\n      }),\r\n      applicationConfig({\r\n        providers: [\r\n          importProvidersFrom(\r\n            MarkdownService\r\n          ),\r\n        ],\r\n      }),\r\n  componentWrapperDecorator(story => `<app-markdowncode [myselectedtemp]= \"myselectedtemp\"></app-markdowncode>`)\r\n  ]\r\n}"
                },
                {
                    "name": "ShowClipboard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/markdown/markdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n          args:{\r\n            myselectedtemp : 'showclipboard'\r\n          }\r\n          }"
                },
                {
                    "name": "ShowCommandline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/markdown/markdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n        args:{\r\n          myselectedtemp : 'showcommandline'\r\n        }\r\n        }"
                }
            ],
            "src/app/components/task/task.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  onPinTask: action('onPinTask'),\r\n  onArchiveTask: action('onArchiveTask'),\r\n}"
                },
                {
                    "name": "Archived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\nargs:{\r\n  task: {\r\n    id: '1',\r\n    title: 'Test Task',\r\n    state: 'TASK_ARCHIVED',\r\n  }\r\n}\r\n}"
                },
                {
                    "name": "DefaultTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\nargs: {\r\n    task: {\r\n      id: '1',\r\n      title: 'Test Task',\r\n      state: 'TASK_INBOX',\r\n    }\r\n  },\r\n}"
                },
                {
                    "name": "LongTitle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\nargs:{\r\n  task: {\r\n    ...(DefaultTask?.args?.['task'] as Task),\r\n    title: longTitleString,\r\n  },\r\n}\r\n}"
                },
                {
                    "name": "longTitleString",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`This task's name is absurdly large. In fact, I think if I keep going I might end up with content overflow. What will happen? The star that represents a pinned task could have text overlapping. The text could cut-off abruptly when it reaches the star. I hope not!`"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<TaskComponent>",
                    "defaultValue": "{\r\n  /* 👇 The title prop is optional.\r\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\r\n   * to learn how to generate automatic titles\r\n   */\r\n  title: 'Task/TaskComponent',\r\n  component: TaskComponent,\r\n\r\n}"
                },
                {
                    "name": "Pinned",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args:{\r\n    task: {\r\n      id: '1',\r\n      title: 'Test Task',\r\n      state: 'TASK_PINNED',\r\n    },\r\n  }\r\n}"
                }
            ],
            "src/app/storybook-design/storybook-design.stories.ts": [
                {
                    "name": "AddMDX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/storybook-design/storybook-design.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'mdx'\r\n  }\r\n}"
                },
                {
                    "name": "AddStory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/storybook-design/storybook-design.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'addstory'\r\n  }\r\n}"
                },
                {
                    "name": "DeployChromatic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/storybook-design/storybook-design.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'chromatic'\r\n  }\r\n}"
                },
                {
                    "name": "FileStructure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/storybook-design/storybook-design.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'structure'\r\n  }\r\n}"
                },
                {
                    "name": "GitComamnds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/storybook-design/storybook-design.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'git'\r\n  }\r\n}"
                },
                {
                    "name": "ImportantSteps",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/storybook-design/storybook-design.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'plan'\r\n  }\r\n}"
                },
                {
                    "name": "ImportModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/storybook-design/storybook-design.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'import'\r\n  }\r\n}"
                },
                {
                    "name": "metaDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/storybook-design/storybook-design.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<StorybookDesignComponent>",
                    "defaultValue": "{\r\n\r\n  title: 'Setup/Storybook',\r\n  component: StorybookDesignComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      //👇 Imports both components to allow component composition with storybook\r\n      declarations: [StorybookDesignComponent],\r\n      imports: [\r\n        CommonModule,\r\n        // SharedModule,\r\n        HttpClientModule,\r\n        MarkdownModule.forRoot({ loader: HttpClient }),\r\n      ]\r\n    }),\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(\r\n          CommonModule,\r\n          HttpClientModule,\r\n          MarkdownModule.forRoot({ loader: HttpClient }),\r\n          MarkdownService\r\n        ),\r\n      ],\r\n    }),\r\n    componentWrapperDecorator(story => `<app-storybook-design [myselectedtemp]= \"myselectedtemp\"></app-storybook-design>`)\r\n  ]\r\n}"
                },
                {
                    "name": "ModifyMetaData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/storybook-design/storybook-design.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'meta'\r\n  }\r\n}"
                },
                {
                    "name": "ModifyPreview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/storybook-design/storybook-design.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'order'\r\n  }\r\n}"
                }
            ],
            "src/app/components/pure-inbox-screen/pure-inbox-screen.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-inbox-screen/pure-inbox-screen.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-inbox-screen/pure-inbox-screen.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    error: true,\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-inbox-screen/pure-inbox-screen.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PureInboxScreenComponent>",
                    "defaultValue": "{\r\n  component: PureInboxScreenComponent,\r\n  title: 'Task/PureInboxScreen',\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [CommonModule, TaskModule],\r\n    }),\r\n    applicationConfig({\r\n     providers: [Store, importProvidersFrom(NgxsModule.forRoot([TasksState]))],\r\n    }),\r\n  ],\r\n}"
                }
            ],
            "src/app/components/pure-tasklist/pure-tasklist.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "tasklistStyleStory",
                    "defaultValue": "{\r\n    args: {\r\n        tasks: [\r\n            { ...(TaskStory.DefaultTask.args?.['task'] as Task), id: '1', title: 'Task 1' },\r\n            { ...(TaskStory.DefaultTask.args?.['task'] as Task), id: '2', title: 'Task 2' },\r\n            { ...(TaskStory.DefaultTask.args?.['task'] as Task), id: '3', title: 'Task 3' },\r\n            { ...(TaskStory.DefaultTask.args?.['task'] as Task), id: '4', title: 'Task 4' },\r\n            { ...(TaskStory.DefaultTask.args?.['task'] as Task), id: '5', title: 'Task 5' },\r\n            { ...(TaskStory.DefaultTask.args?.['task'] as Task), id: '6', title: 'Task 6' },\r\n            { ...(TaskStory.DefaultTask.args?.['task'] as Task), id: '7', title: 'Task 7' },\r\n          ],\r\n      }\r\n}"
                },
                {
                    "name": "Empty",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "tasklistStyleStory",
                    "defaultValue": "{\r\n  args: {\r\n    ...Loading.args,\r\n    loading: false,\r\n    }\r\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "tasklistStyleStory",
                    "defaultValue": "{\r\n  args: {\r\n    tasks: [],\r\n    loading: true\r\n    }\r\n}"
                },
                {
                    "name": "metaDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PureTaskListComponent>",
                    "defaultValue": "{\r\n\r\n  title: 'Task/TaskListComponent',\r\n  component: PureTaskListComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      declarations: [PureTaskListComponent, TaskComponent],\r\n      imports: [\r\n        CommonModule,\r\n        HttpClientModule,\r\n        \r\n      ]\r\n    }),\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(\r\n          CommonModule,\r\n          HttpClientModule,\r\n   \r\n        ),\r\n      ],\r\n    }),\r\n    componentWrapperDecorator(story => `<div style=\"margin: 3em\">${story}</div>`)\r\n  ]\r\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "tasklistStyleStory",
                    "defaultValue": "{\r\n    args: {\r\n        onPinTask: TaskStory.DefaultTask.args?.onPinTask,\r\n        onArchiveTask: TaskStory.DefaultTask.args?.onArchiveTask,\r\n      }\r\n}"
                },
                {
                    "name": "WithPinnedTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "tasklistStyleStory",
                    "defaultValue": "{\r\n  args: {\r\n    tasks: [\r\n        ...(Default.args?.['tasks'] as Task[]).slice(0,5),\r\n      { id: '6', title: 'Task 6 (pinned)', state: 'TASK_PINNED' },\r\n    ],\r\n    }\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: true\r\n  }"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    production: false\r\n  }"
                }
            ],
            "src/app/mermaid/mermaid.stories.ts": [
                {
                    "name": "MermaidAttachClass",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'attachclass'\r\n  }\r\n}"
                },
                {
                    "name": "MermaidCustomColors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'customcolors'\r\n  }\r\n}"
                },
                {
                    "name": "MermaidFontawesome",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'fa'\r\n  }\r\n}"
                },
                {
                    "name": "MermaidFromComponent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'fromComponent'\r\n  }\r\n}"
                },
                {
                    "name": "MermaidFromSrc",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'fromSrc'\r\n  }\r\n}"
                },
                {
                    "name": "MermaidFromTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'fromTemplate'\r\n  }\r\n}"
                },
                {
                    "name": "MermaidSimpleform",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'simpleform'\r\n  }\r\n}"
                },
                {
                    "name": "MermaidSubgraph",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'subgraph'\r\n  }\r\n}"
                },
                {
                    "name": "MermaidThemes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'themes'\r\n  }\r\n}"
                },
                {
                    "name": "metaDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<MermaidComponent>",
                    "defaultValue": "{\r\n  /* 👇 The title prop is optional.\r\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\r\n   * to learn how to generate automatic titles\r\n   */\r\n  title: 'Setup/Mermaid',\r\n  component: MermaidComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      //👇 Imports both components to allow component composition with storybook\r\n      declarations: [MermaidComponent],\r\n      imports: [\r\n        CommonModule,\r\n        // SharedModule,\r\n        HttpClientModule,\r\n        MarkdownModule.forRoot({ loader: HttpClient }),\r\n      ]\r\n    }),\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(\r\n          CommonModule,\r\n          HttpClientModule,\r\n          MarkdownModule.forRoot({ loader: HttpClient }),\r\n          MarkdownService\r\n        ),\r\n      ],\r\n    }),\r\n    componentWrapperDecorator(story => `<app-mermaidcode [myselectedtemp]= \"myselectedtemp\"></app-mermaidcode>`)\r\n  ]\r\n}"
                }
            ],
            "src/app/hide/hide.stories.ts": [
                {
                    "name": "metaDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/hide/hide.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HideComponent>",
                    "defaultValue": "{\r\n\r\n    \r\n  title: 'Hide/Task',\r\n  component: HideComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      //👇 Imports both components to allow component composition with storybook\r\n      declarations: [HideComponent],\r\n      imports: [\r\n        CommonModule,\r\n        // SharedModule,\r\n        HttpClientModule,\r\n        MarkdownModule.forRoot({ loader: HttpClient }),\r\n      ]\r\n    }),\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(\r\n          CommonModule,\r\n          HttpClientModule,\r\n          MarkdownModule.forRoot({ loader: HttpClient }),\r\n          MarkdownService\r\n        ),\r\n      ],\r\n    }),\r\n    componentWrapperDecorator(story => `<app-hide-story [myselectedtemp]= \"myselectedtemp\"></app-hide-story>`)\r\n  ]\r\n}"
                },
                {
                    "name": "SimpleTaskMermaid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/hide/hide.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\t\r\n  args: {\t\r\n    myselectedtemp: 'simpleTask'\t\r\n  }\t\r\n}"
                },
                {
                    "name": "TaskListMermaid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/hide/hide.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\t\r\n  args: {\t\r\n    myselectedtemp: 'taskList'\t\r\n  }\t\r\n}"
                }
            ],
            "src/app/youtube/youtube.stories.ts": [
                {
                    "name": "metaDetail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/youtube/youtube.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<YoutubeComponent>",
                    "defaultValue": "{\r\n  /* 👇 The title prop is optional.\r\n   * See https://storybook.js.org/docs/angular/configure/overview#configure-story-loading\r\n   * to learn how to generate automatic titles\r\n   */\r\n  title: 'Youtube/Title',\r\n  component: YoutubeComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      //👇 Imports both components to allow component composition with storybook\r\n      declarations: [YoutubeComponent],\r\n      imports: [\r\n        CommonModule,\r\n        // SharedModule,\r\n        HttpClientModule,\r\n        MarkdownModule.forRoot({ loader: HttpClient }),\r\n      ]\r\n    }),\r\n    applicationConfig({\r\n      providers: [\r\n        importProvidersFrom(\r\n          CommonModule,\r\n          HttpClientModule,\r\n          MarkdownModule.forRoot({ loader: HttpClient }),\r\n          MarkdownService\r\n        ),\r\n      ],\r\n    }),\r\n    componentWrapperDecorator(story => `<app-youtube [myselectedtemp]= \"myselectedtemp\"></app-youtube>`)\r\n  ]\r\n}"
                },
                {
                    "name": "Title",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/youtube/youtube.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryDetail",
                    "defaultValue": "{\r\n  args: {\r\n    myselectedtemp: 'plan'\r\n  }\r\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    layout: 'centered',\n    options: {\n      storySort: {\n        order: [\n          'Youtube',\n          ['Title'],\n          'Setup',\n          [  'Markdown', 'Mermaid'],\n          'Task',\n          ['Task', 'TaskList'],\n          'Screen',\n          ['InboxScreen']\n        ],\n      },\n       showPanel: false \n    },\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/components/pure-inbox-screen/pure-inbox-screen.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PureInboxScreenComponent>",
                    "file": "src/app/components/pure-inbox-screen/pure-inbox-screen.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/components/task/task.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TaskComponent>",
                    "file": "src/app/components/task/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/hide/hide.stories.ts": [
                {
                    "name": "StoryDetail",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HideComponent>",
                    "file": "src/app/hide/hide.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/markdown/markdown.stories.ts": [
                {
                    "name": "StoryDetail",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<MarkdownComponent>",
                    "file": "src/app/markdown/markdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/mermaid/mermaid.stories.ts": [
                {
                    "name": "StoryDetail",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<MermaidComponent>",
                    "file": "src/app/mermaid/mermaid.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/storybook-design/storybook-design.stories.ts": [
                {
                    "name": "StoryDetail",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StorybookDesignComponent>",
                    "file": "src/app/storybook-design/storybook-design.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/youtube/youtube.stories.ts": [
                {
                    "name": "StoryDetail",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<YoutubeComponent>",
                    "file": "src/app/youtube/youtube.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/components/pure-tasklist/pure-tasklist.stories.ts": [
                {
                    "name": "tasklistStyleStory",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PureTaskListComponent>",
                    "file": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/inbox-screen/inbox-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InboxScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-inbox-screen/pure-inbox-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PureInboxScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-inbox-screen/pure-inbox-screen.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-inbox-screen/pure-inbox-screen.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-inbox-screen/pure-inbox-screen.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-tasklist/pure-tasklist.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PureTaskListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Empty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/pure-tasklist/pure-tasklist.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPinnedTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 33,
                "coverageCount": "2/6",
                "status": "medium"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Archived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LongTitle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "longTitleString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/task/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Pinned",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/tasklist/tasklist.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskListComponent",
                "coveragePercent": 40,
                "coverageCount": "2/5",
                "status": "medium"
            },
            {
                "filePath": "src/app/hide/hide.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HideComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/hide/hide.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/hide/hide.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SimpleTaskMermaid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/hide/hide.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TaskListMermaid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/markdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MarkdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/markdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/markdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MarkdownFromComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/markdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MarkdownFromsrc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/markdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MarkdownFromTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/markdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/markdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ShowClipboard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/markdown/markdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ShowCommandline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MermaidComponent",
                "coveragePercent": 0,
                "coverageCount": "0/30",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MermaidAttachClass",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MermaidCustomColors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MermaidFontawesome",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MermaidFromComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MermaidFromSrc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MermaidFromTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MermaidSimpleform",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MermaidSubgraph",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MermaidThemes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/mermaid/mermaid.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/models/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppError",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ArchiveTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PinTask",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TasksState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskStateModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/state/task.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook-design/storybook-design.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StorybookDesignComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook-design/storybook-design.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddMDX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook-design/storybook-design.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddStory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook-design/storybook-design.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DeployChromatic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook-design/storybook-design.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FileStructure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook-design/storybook-design.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GitComamnds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook-design/storybook-design.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ImportantSteps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook-design/storybook-design.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ImportModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook-design/storybook-design.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook-design/storybook-design.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ModifyMetaData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/storybook-design/storybook-design.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ModifyPreview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/youtube/youtube.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "YoutubeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/youtube/youtube.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaDetail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/youtube/youtube.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Title",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}